// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	Initialize
	GetFeatures
	Features
	ClearSession
	ApplySettings
	ChangePin
	Ping
	Success
	Failure
	ButtonRequest
	ButtonAck
	PinMatrixRequest
	PinMatrixAck
	Cancel
	PassphraseRequest
	PassphraseAck
	GetEntropy
	Entropy
	GetPublicKey
	PublicKey
	GetAddress
	EthereumGetAddress
	Address
	EthereumAddress
	WipeDevice
	LoadDevice
	ResetDevice
	EntropyRequest
	EntropyAck
	RecoveryDevice
	WordRequest
	WordAck
	SignMessage
	VerifyMessage
	MessageSignature
	EncryptMessage
	EncryptedMessage
	DecryptMessage
	DecryptedMessage
	CipherKeyValue
	CipheredKeyValue
	EstimateTxSize
	TxSize
	SignTx
	SimpleSignTx
	TxRequest
	TxAck
	EthereumSignTx
	EthereumTxRequest
	EthereumTxAck
	SignIdentity
	SignedIdentity
	GetECDHSessionKey
	ECDHSessionKey
	SetU2FCounter
	FirmwareErase
	FirmwareUpload
	DebugLinkDecision
	DebugLinkGetState
	DebugLinkState
	DebugLinkStop
	DebugLinkLog
	DebugLinkMemoryRead
	DebugLinkMemory
	DebugLinkMemoryWrite
	DebugLinkFlashErase
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/conejoninja/tesoro/pb/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// *
// Mapping between Trezor wire identifier (uint) and a protobuf message
type MessageType int32

const (
	MessageType_MessageType_Initialize           MessageType = 0
	MessageType_MessageType_Ping                 MessageType = 1
	MessageType_MessageType_Success              MessageType = 2
	MessageType_MessageType_Failure              MessageType = 3
	MessageType_MessageType_ChangePin            MessageType = 4
	MessageType_MessageType_WipeDevice           MessageType = 5
	MessageType_MessageType_FirmwareErase        MessageType = 6
	MessageType_MessageType_FirmwareUpload       MessageType = 7
	MessageType_MessageType_GetEntropy           MessageType = 9
	MessageType_MessageType_Entropy              MessageType = 10
	MessageType_MessageType_GetPublicKey         MessageType = 11
	MessageType_MessageType_PublicKey            MessageType = 12
	MessageType_MessageType_LoadDevice           MessageType = 13
	MessageType_MessageType_ResetDevice          MessageType = 14
	MessageType_MessageType_SignTx               MessageType = 15
	MessageType_MessageType_SimpleSignTx         MessageType = 16
	MessageType_MessageType_Features             MessageType = 17
	MessageType_MessageType_PinMatrixRequest     MessageType = 18
	MessageType_MessageType_PinMatrixAck         MessageType = 19
	MessageType_MessageType_Cancel               MessageType = 20
	MessageType_MessageType_TxRequest            MessageType = 21
	MessageType_MessageType_TxAck                MessageType = 22
	MessageType_MessageType_CipherKeyValue       MessageType = 23
	MessageType_MessageType_ClearSession         MessageType = 24
	MessageType_MessageType_ApplySettings        MessageType = 25
	MessageType_MessageType_ButtonRequest        MessageType = 26
	MessageType_MessageType_ButtonAck            MessageType = 27
	MessageType_MessageType_GetAddress           MessageType = 29
	MessageType_MessageType_Address              MessageType = 30
	MessageType_MessageType_EntropyRequest       MessageType = 35
	MessageType_MessageType_EntropyAck           MessageType = 36
	MessageType_MessageType_SignMessage          MessageType = 38
	MessageType_MessageType_VerifyMessage        MessageType = 39
	MessageType_MessageType_MessageSignature     MessageType = 40
	MessageType_MessageType_PassphraseRequest    MessageType = 41
	MessageType_MessageType_PassphraseAck        MessageType = 42
	MessageType_MessageType_EstimateTxSize       MessageType = 43
	MessageType_MessageType_TxSize               MessageType = 44
	MessageType_MessageType_RecoveryDevice       MessageType = 45
	MessageType_MessageType_WordRequest          MessageType = 46
	MessageType_MessageType_WordAck              MessageType = 47
	MessageType_MessageType_CipheredKeyValue     MessageType = 48
	MessageType_MessageType_EncryptMessage       MessageType = 49
	MessageType_MessageType_EncryptedMessage     MessageType = 50
	MessageType_MessageType_DecryptMessage       MessageType = 51
	MessageType_MessageType_DecryptedMessage     MessageType = 52
	MessageType_MessageType_SignIdentity         MessageType = 53
	MessageType_MessageType_SignedIdentity       MessageType = 54
	MessageType_MessageType_GetFeatures          MessageType = 55
	MessageType_MessageType_EthereumGetAddress   MessageType = 56
	MessageType_MessageType_EthereumAddress      MessageType = 57
	MessageType_MessageType_EthereumSignTx       MessageType = 58
	MessageType_MessageType_EthereumTxRequest    MessageType = 59
	MessageType_MessageType_EthereumTxAck        MessageType = 60
	MessageType_MessageType_GetECDHSessionKey    MessageType = 61
	MessageType_MessageType_ECDHSessionKey       MessageType = 62
	MessageType_MessageType_SetU2FCounter        MessageType = 63
	MessageType_MessageType_DebugLinkDecision    MessageType = 100
	MessageType_MessageType_DebugLinkGetState    MessageType = 101
	MessageType_MessageType_DebugLinkState       MessageType = 102
	MessageType_MessageType_DebugLinkStop        MessageType = 103
	MessageType_MessageType_DebugLinkLog         MessageType = 104
	MessageType_MessageType_DebugLinkMemoryRead  MessageType = 110
	MessageType_MessageType_DebugLinkMemory      MessageType = 111
	MessageType_MessageType_DebugLinkMemoryWrite MessageType = 112
	MessageType_MessageType_DebugLinkFlashErase  MessageType = 113
)

var MessageType_name = map[int32]string{
	0:   "MessageType_Initialize",
	1:   "MessageType_Ping",
	2:   "MessageType_Success",
	3:   "MessageType_Failure",
	4:   "MessageType_ChangePin",
	5:   "MessageType_WipeDevice",
	6:   "MessageType_FirmwareErase",
	7:   "MessageType_FirmwareUpload",
	9:   "MessageType_GetEntropy",
	10:  "MessageType_Entropy",
	11:  "MessageType_GetPublicKey",
	12:  "MessageType_PublicKey",
	13:  "MessageType_LoadDevice",
	14:  "MessageType_ResetDevice",
	15:  "MessageType_SignTx",
	16:  "MessageType_SimpleSignTx",
	17:  "MessageType_Features",
	18:  "MessageType_PinMatrixRequest",
	19:  "MessageType_PinMatrixAck",
	20:  "MessageType_Cancel",
	21:  "MessageType_TxRequest",
	22:  "MessageType_TxAck",
	23:  "MessageType_CipherKeyValue",
	24:  "MessageType_ClearSession",
	25:  "MessageType_ApplySettings",
	26:  "MessageType_ButtonRequest",
	27:  "MessageType_ButtonAck",
	29:  "MessageType_GetAddress",
	30:  "MessageType_Address",
	35:  "MessageType_EntropyRequest",
	36:  "MessageType_EntropyAck",
	38:  "MessageType_SignMessage",
	39:  "MessageType_VerifyMessage",
	40:  "MessageType_MessageSignature",
	41:  "MessageType_PassphraseRequest",
	42:  "MessageType_PassphraseAck",
	43:  "MessageType_EstimateTxSize",
	44:  "MessageType_TxSize",
	45:  "MessageType_RecoveryDevice",
	46:  "MessageType_WordRequest",
	47:  "MessageType_WordAck",
	48:  "MessageType_CipheredKeyValue",
	49:  "MessageType_EncryptMessage",
	50:  "MessageType_EncryptedMessage",
	51:  "MessageType_DecryptMessage",
	52:  "MessageType_DecryptedMessage",
	53:  "MessageType_SignIdentity",
	54:  "MessageType_SignedIdentity",
	55:  "MessageType_GetFeatures",
	56:  "MessageType_EthereumGetAddress",
	57:  "MessageType_EthereumAddress",
	58:  "MessageType_EthereumSignTx",
	59:  "MessageType_EthereumTxRequest",
	60:  "MessageType_EthereumTxAck",
	61:  "MessageType_GetECDHSessionKey",
	62:  "MessageType_ECDHSessionKey",
	63:  "MessageType_SetU2FCounter",
	100: "MessageType_DebugLinkDecision",
	101: "MessageType_DebugLinkGetState",
	102: "MessageType_DebugLinkState",
	103: "MessageType_DebugLinkStop",
	104: "MessageType_DebugLinkLog",
	110: "MessageType_DebugLinkMemoryRead",
	111: "MessageType_DebugLinkMemory",
	112: "MessageType_DebugLinkMemoryWrite",
	113: "MessageType_DebugLinkFlashErase",
}
var MessageType_value = map[string]int32{
	"MessageType_Initialize":           0,
	"MessageType_Ping":                 1,
	"MessageType_Success":              2,
	"MessageType_Failure":              3,
	"MessageType_ChangePin":            4,
	"MessageType_WipeDevice":           5,
	"MessageType_FirmwareErase":        6,
	"MessageType_FirmwareUpload":       7,
	"MessageType_GetEntropy":           9,
	"MessageType_Entropy":              10,
	"MessageType_GetPublicKey":         11,
	"MessageType_PublicKey":            12,
	"MessageType_LoadDevice":           13,
	"MessageType_ResetDevice":          14,
	"MessageType_SignTx":               15,
	"MessageType_SimpleSignTx":         16,
	"MessageType_Features":             17,
	"MessageType_PinMatrixRequest":     18,
	"MessageType_PinMatrixAck":         19,
	"MessageType_Cancel":               20,
	"MessageType_TxRequest":            21,
	"MessageType_TxAck":                22,
	"MessageType_CipherKeyValue":       23,
	"MessageType_ClearSession":         24,
	"MessageType_ApplySettings":        25,
	"MessageType_ButtonRequest":        26,
	"MessageType_ButtonAck":            27,
	"MessageType_GetAddress":           29,
	"MessageType_Address":              30,
	"MessageType_EntropyRequest":       35,
	"MessageType_EntropyAck":           36,
	"MessageType_SignMessage":          38,
	"MessageType_VerifyMessage":        39,
	"MessageType_MessageSignature":     40,
	"MessageType_PassphraseRequest":    41,
	"MessageType_PassphraseAck":        42,
	"MessageType_EstimateTxSize":       43,
	"MessageType_TxSize":               44,
	"MessageType_RecoveryDevice":       45,
	"MessageType_WordRequest":          46,
	"MessageType_WordAck":              47,
	"MessageType_CipheredKeyValue":     48,
	"MessageType_EncryptMessage":       49,
	"MessageType_EncryptedMessage":     50,
	"MessageType_DecryptMessage":       51,
	"MessageType_DecryptedMessage":     52,
	"MessageType_SignIdentity":         53,
	"MessageType_SignedIdentity":       54,
	"MessageType_GetFeatures":          55,
	"MessageType_EthereumGetAddress":   56,
	"MessageType_EthereumAddress":      57,
	"MessageType_EthereumSignTx":       58,
	"MessageType_EthereumTxRequest":    59,
	"MessageType_EthereumTxAck":        60,
	"MessageType_GetECDHSessionKey":    61,
	"MessageType_ECDHSessionKey":       62,
	"MessageType_SetU2FCounter":        63,
	"MessageType_DebugLinkDecision":    100,
	"MessageType_DebugLinkGetState":    101,
	"MessageType_DebugLinkState":       102,
	"MessageType_DebugLinkStop":        103,
	"MessageType_DebugLinkLog":         104,
	"MessageType_DebugLinkMemoryRead":  110,
	"MessageType_DebugLinkMemory":      111,
	"MessageType_DebugLinkMemoryWrite": 112,
	"MessageType_DebugLinkFlashErase":  113,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Request: Reset device to default state and ask for device details
// @next Features
type Initialize struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Initialize) Reset()                    { *m = Initialize{} }
func (m *Initialize) String() string            { return proto.CompactTextString(m) }
func (*Initialize) ProtoMessage()               {}
func (*Initialize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Request: Ask for device details (no device reset)
// @next Features
type GetFeatures struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetFeatures) Reset()                    { *m = GetFeatures{} }
func (m *GetFeatures) String() string            { return proto.CompactTextString(m) }
func (*GetFeatures) ProtoMessage()               {}
func (*GetFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Response: Reports various information about the device
// @prev Initialize
// @prev GetFeatures
type Features struct {
	Vendor               *string           `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	MajorVersion         *uint32           `protobuf:"varint,2,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	MinorVersion         *uint32           `protobuf:"varint,3,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	PatchVersion         *uint32           `protobuf:"varint,4,opt,name=patch_version,json=patchVersion" json:"patch_version,omitempty"`
	BootloaderMode       *bool             `protobuf:"varint,5,opt,name=bootloader_mode,json=bootloaderMode" json:"bootloader_mode,omitempty"`
	DeviceId             *string           `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	PinProtection        *bool             `protobuf:"varint,7,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool             `protobuf:"varint,8,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string           `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Label                *string           `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`
	Coins                []*types.CoinType `protobuf:"bytes,11,rep,name=coins" json:"coins,omitempty"`
	Initialized          *bool             `protobuf:"varint,12,opt,name=initialized" json:"initialized,omitempty"`
	Revision             []byte            `protobuf:"bytes,13,opt,name=revision" json:"revision,omitempty"`
	BootloaderHash       []byte            `protobuf:"bytes,14,opt,name=bootloader_hash,json=bootloaderHash" json:"bootloader_hash,omitempty"`
	Imported             *bool             `protobuf:"varint,15,opt,name=imported" json:"imported,omitempty"`
	PinCached            *bool             `protobuf:"varint,16,opt,name=pin_cached,json=pinCached" json:"pin_cached,omitempty"`
	PassphraseCached     *bool             `protobuf:"varint,17,opt,name=passphrase_cached,json=passphraseCached" json:"passphrase_cached,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *Features) Reset()                    { *m = Features{} }
func (m *Features) String() string            { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()               {}
func (*Features) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Features) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *Features) GetMajorVersion() uint32 {
	if m != nil && m.MajorVersion != nil {
		return *m.MajorVersion
	}
	return 0
}

func (m *Features) GetMinorVersion() uint32 {
	if m != nil && m.MinorVersion != nil {
		return *m.MinorVersion
	}
	return 0
}

func (m *Features) GetPatchVersion() uint32 {
	if m != nil && m.PatchVersion != nil {
		return *m.PatchVersion
	}
	return 0
}

func (m *Features) GetBootloaderMode() bool {
	if m != nil && m.BootloaderMode != nil {
		return *m.BootloaderMode
	}
	return false
}

func (m *Features) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Features) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Features) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *Features) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Features) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Features) GetCoins() []*types.CoinType {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Features) GetInitialized() bool {
	if m != nil && m.Initialized != nil {
		return *m.Initialized
	}
	return false
}

func (m *Features) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Features) GetBootloaderHash() []byte {
	if m != nil {
		return m.BootloaderHash
	}
	return nil
}

func (m *Features) GetImported() bool {
	if m != nil && m.Imported != nil {
		return *m.Imported
	}
	return false
}

func (m *Features) GetPinCached() bool {
	if m != nil && m.PinCached != nil {
		return *m.PinCached
	}
	return false
}

func (m *Features) GetPassphraseCached() bool {
	if m != nil && m.PassphraseCached != nil {
		return *m.PassphraseCached
	}
	return false
}

// *
// Request: clear session (removes cached PIN, passphrase, etc).
// @next Success
type ClearSession struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearSession) Reset()                    { *m = ClearSession{} }
func (m *ClearSession) String() string            { return proto.CompactTextString(m) }
func (*ClearSession) ProtoMessage()               {}
func (*ClearSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Request: change language and/or label of the device
// @next Success
// @next Failure
// @next ButtonRequest
// @next PinMatrixRequest
type ApplySettings struct {
	Language         *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Label            *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	UsePassphrase    *bool   `protobuf:"varint,3,opt,name=use_passphrase,json=usePassphrase" json:"use_passphrase,omitempty"`
	Homescreen       []byte  `protobuf:"bytes,4,opt,name=homescreen" json:"homescreen,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApplySettings) Reset()                    { *m = ApplySettings{} }
func (m *ApplySettings) String() string            { return proto.CompactTextString(m) }
func (*ApplySettings) ProtoMessage()               {}
func (*ApplySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApplySettings) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *ApplySettings) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ApplySettings) GetUsePassphrase() bool {
	if m != nil && m.UsePassphrase != nil {
		return *m.UsePassphrase
	}
	return false
}

func (m *ApplySettings) GetHomescreen() []byte {
	if m != nil {
		return m.Homescreen
	}
	return nil
}

// *
// Request: Starts workflow for setting/changing/removing the PIN
// @next ButtonRequest
// @next PinMatrixRequest
type ChangePin struct {
	Remove           *bool  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangePin) Reset()                    { *m = ChangePin{} }
func (m *ChangePin) String() string            { return proto.CompactTextString(m) }
func (*ChangePin) ProtoMessage()               {}
func (*ChangePin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChangePin) GetRemove() bool {
	if m != nil && m.Remove != nil {
		return *m.Remove
	}
	return false
}

// *
// Request: Test if the device is alive, device sends back the message in Success response
// @next Success
type Ping struct {
	Message              *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ButtonProtection     *bool   `protobuf:"varint,2,opt,name=button_protection,json=buttonProtection" json:"button_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ping) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Ping) GetButtonProtection() bool {
	if m != nil && m.ButtonProtection != nil {
		return *m.ButtonProtection
	}
	return false
}

func (m *Ping) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Ping) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

// *
// Response: Success of the previous request
type Success struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Success) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Failure of the previous request
type Failure struct {
	Code             *types.FailureType `protobuf:"varint,1,opt,name=code,enum=FailureType" json:"code,omitempty"`
	Message          *string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Failure) GetCode() types.FailureType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return types.FailureType_Failure_UnexpectedMessage
}

func (m *Failure) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Device is waiting for HW button press.
// @next ButtonAck
// @next Cancel
type ButtonRequest struct {
	Code             *types.ButtonRequestType `protobuf:"varint,1,opt,name=code,enum=ButtonRequestType" json:"code,omitempty"`
	Data             *string                  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ButtonRequest) Reset()                    { *m = ButtonRequest{} }
func (m *ButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonRequest) ProtoMessage()               {}
func (*ButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ButtonRequest) GetCode() types.ButtonRequestType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return types.ButtonRequestType_ButtonRequest_Other
}

func (m *ButtonRequest) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// *
// Request: Computer agrees to wait for HW button press
// @prev ButtonRequest
type ButtonAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ButtonAck) Reset()                    { *m = ButtonAck{} }
func (m *ButtonAck) String() string            { return proto.CompactTextString(m) }
func (*ButtonAck) ProtoMessage()               {}
func (*ButtonAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// *
// Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
// @next PinMatrixAck
// @next Cancel
type PinMatrixRequest struct {
	Type             *types.PinMatrixRequestType `protobuf:"varint,1,opt,name=type,enum=PinMatrixRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *PinMatrixRequest) Reset()                    { *m = PinMatrixRequest{} }
func (m *PinMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixRequest) ProtoMessage()               {}
func (*PinMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PinMatrixRequest) GetType() types.PinMatrixRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return types.PinMatrixRequestType_PinMatrixRequestType_Current
}

// *
// Request: Computer responds with encoded PIN
// @prev PinMatrixRequest
type PinMatrixAck struct {
	Pin              *string `protobuf:"bytes,1,req,name=pin" json:"pin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PinMatrixAck) Reset()                    { *m = PinMatrixAck{} }
func (m *PinMatrixAck) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixAck) ProtoMessage()               {}
func (*PinMatrixAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PinMatrixAck) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

// *
// Request: Abort last operation that required user interaction
// @prev ButtonRequest
// @prev PinMatrixRequest
// @prev PassphraseRequest
type Cancel struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cancel) Reset()                    { *m = Cancel{} }
func (m *Cancel) String() string            { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()               {}
func (*Cancel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// *
// Response: Device awaits encryption passphrase
// @next PassphraseAck
// @next Cancel
type PassphraseRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseRequest) Reset()                    { *m = PassphraseRequest{} }
func (m *PassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseRequest) ProtoMessage()               {}
func (*PassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// *
// Request: Send passphrase back
// @prev PassphraseRequest
type PassphraseAck struct {
	Passphrase       *string `protobuf:"bytes,1,req,name=passphrase" json:"passphrase,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PassphraseAck) Reset()                    { *m = PassphraseAck{} }
func (m *PassphraseAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseAck) ProtoMessage()               {}
func (*PassphraseAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PassphraseAck) GetPassphrase() string {
	if m != nil && m.Passphrase != nil {
		return *m.Passphrase
	}
	return ""
}

// *
// Request: Request a sample of random data generated by hardware RNG. May be used for testing.
// @next ButtonRequest
// @next Entropy
// @next Failure
type GetEntropy struct {
	Size             *uint32 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEntropy) Reset()                    { *m = GetEntropy{} }
func (m *GetEntropy) String() string            { return proto.CompactTextString(m) }
func (*GetEntropy) ProtoMessage()               {}
func (*GetEntropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetEntropy) GetSize() uint32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// *
// Response: Reply with random data generated by internal RNG
// @prev GetEntropy
type Entropy struct {
	Entropy          []byte `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Entropy) Reset()                    { *m = Entropy{} }
func (m *Entropy) String() string            { return proto.CompactTextString(m) }
func (*Entropy) ProtoMessage()               {}
func (*Entropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Entropy) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Ask device for public key corresponding to address_n path
// @next PassphraseRequest
// @next PublicKey
// @next Failure
type GetPublicKey struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	EcdsaCurveName   *string  `protobuf:"bytes,2,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetPublicKey) Reset()                    { *m = GetPublicKey{} }
func (m *GetPublicKey) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKey) ProtoMessage()               {}
func (*GetPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GetPublicKey) GetEcdsaCurveName() string {
	if m != nil && m.EcdsaCurveName != nil {
		return *m.EcdsaCurveName
	}
	return ""
}

func (m *GetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @prev GetPublicKey
type PublicKey struct {
	Node             *types.HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	Xpub             *string           `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PublicKey) GetNode() *types.HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *PublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

// *
// Request: Ask device for address corresponding to address_n path
// @next PassphraseRequest
// @next Address
// @next Failure
type GetAddress struct {
	AddressN         []uint32                        `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	CoinName         *string                         `protobuf:"bytes,2,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	ShowDisplay      *bool                           `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	Multisig         *types.MultisigRedeemScriptType `protobuf:"bytes,4,opt,name=multisig" json:"multisig,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *GetAddress) Reset()                    { *m = GetAddress{} }
func (m *GetAddress) String() string            { return proto.CompactTextString(m) }
func (*GetAddress) ProtoMessage()               {}
func (*GetAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

const Default_GetAddress_CoinName string = "Bitcoin"

func (m *GetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GetAddress) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_GetAddress_CoinName
}

func (m *GetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

func (m *GetAddress) GetMultisig() *types.MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

// *
// Request: Ask device for Ethereum address corresponding to address_n path
// @next PassphraseRequest
// @next EthereumAddress
// @next Failure
type EthereumGetAddress struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumGetAddress) Reset()                    { *m = EthereumGetAddress{} }
func (m *EthereumGetAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumGetAddress) ProtoMessage()               {}
func (*EthereumGetAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EthereumGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains address derived from device private seed
// @prev GetAddress
type Address struct {
	Address          *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Address) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Response: Contains an Ethereum address derived from device private seed
// @prev EthereumGetAddress
type EthereumAddress struct {
	Address          []byte `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EthereumAddress) Reset()                    { *m = EthereumAddress{} }
func (m *EthereumAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumAddress) ProtoMessage()               {}
func (*EthereumAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EthereumAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// *
// Request: Request device to wipe all sensitive data and settings
// @next ButtonRequest
type WipeDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WipeDevice) Reset()                    { *m = WipeDevice{} }
func (m *WipeDevice) String() string            { return proto.CompactTextString(m) }
func (*WipeDevice) ProtoMessage()               {}
func (*WipeDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

// *
// Request: Load seed and related internal settings from the computer
// @next ButtonRequest
// @next Success
// @next Failure
type LoadDevice struct {
	Mnemonic             *string           `protobuf:"bytes,1,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                 *types.HDNodeType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin                  *string           `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
	PassphraseProtection *bool             `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string           `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string           `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SkipChecksum         *bool             `protobuf:"varint,7,opt,name=skip_checksum,json=skipChecksum" json:"skip_checksum,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *LoadDevice) Reset()                    { *m = LoadDevice{} }
func (m *LoadDevice) String() string            { return proto.CompactTextString(m) }
func (*LoadDevice) ProtoMessage()               {}
func (*LoadDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

const Default_LoadDevice_Language string = "english"

func (m *LoadDevice) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *LoadDevice) GetNode() *types.HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LoadDevice) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *LoadDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *LoadDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_LoadDevice_Language
}

func (m *LoadDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *LoadDevice) GetSkipChecksum() bool {
	if m != nil && m.SkipChecksum != nil {
		return *m.SkipChecksum
	}
	return false
}

// *
// Request: Ask device to do initialization involving user interaction
// @next EntropyRequest
// @next Failure
type ResetDevice struct {
	DisplayRandom        *bool   `protobuf:"varint,1,opt,name=display_random,json=displayRandom" json:"display_random,omitempty"`
	Strength             *uint32 `protobuf:"varint,2,opt,name=strength,def=256" json:"strength,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,3,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,4,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *ResetDevice) Reset()                    { *m = ResetDevice{} }
func (m *ResetDevice) String() string            { return proto.CompactTextString(m) }
func (*ResetDevice) ProtoMessage()               {}
func (*ResetDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

const Default_ResetDevice_Strength uint32 = 256
const Default_ResetDevice_Language string = "english"

func (m *ResetDevice) GetDisplayRandom() bool {
	if m != nil && m.DisplayRandom != nil {
		return *m.DisplayRandom
	}
	return false
}

func (m *ResetDevice) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return Default_ResetDevice_Strength
}

func (m *ResetDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *ResetDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *ResetDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_ResetDevice_Language
}

func (m *ResetDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

// *
// Response: Ask for additional entropy from host computer
// @prev ResetDevice
// @next EntropyAck
type EntropyRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyRequest) Reset()                    { *m = EntropyRequest{} }
func (m *EntropyRequest) String() string            { return proto.CompactTextString(m) }
func (*EntropyRequest) ProtoMessage()               {}
func (*EntropyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

// *
// Request: Provide additional entropy for seed generation function
// @prev EntropyRequest
// @next ButtonRequest
type EntropyAck struct {
	Entropy          []byte `protobuf:"bytes,1,opt,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyAck) Reset()                    { *m = EntropyAck{} }
func (m *EntropyAck) String() string            { return proto.CompactTextString(m) }
func (*EntropyAck) ProtoMessage()               {}
func (*EntropyAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *EntropyAck) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Start recovery workflow asking user for specific words of mnemonic
// Used to recovery device safely even on untrusted computer.
// @next WordRequest
type RecoveryDevice struct {
	WordCount            *uint32 `protobuf:"varint,1,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,2,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,4,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	EnforceWordlist      *bool   `protobuf:"varint,6,opt,name=enforce_wordlist,json=enforceWordlist" json:"enforce_wordlist,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *RecoveryDevice) Reset()                    { *m = RecoveryDevice{} }
func (m *RecoveryDevice) String() string            { return proto.CompactTextString(m) }
func (*RecoveryDevice) ProtoMessage()               {}
func (*RecoveryDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

const Default_RecoveryDevice_Language string = "english"

func (m *RecoveryDevice) GetWordCount() uint32 {
	if m != nil && m.WordCount != nil {
		return *m.WordCount
	}
	return 0
}

func (m *RecoveryDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *RecoveryDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *RecoveryDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_RecoveryDevice_Language
}

func (m *RecoveryDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *RecoveryDevice) GetEnforceWordlist() bool {
	if m != nil && m.EnforceWordlist != nil {
		return *m.EnforceWordlist
	}
	return false
}

// *
// Response: Device is waiting for user to enter word of the mnemonic
// Its position is shown only on device's internal display.
// @prev RecoveryDevice
// @prev WordAck
type WordRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WordRequest) Reset()                    { *m = WordRequest{} }
func (m *WordRequest) String() string            { return proto.CompactTextString(m) }
func (*WordRequest) ProtoMessage()               {}
func (*WordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

// *
// Request: Computer replies with word from the mnemonic
// @prev WordRequest
// @next WordRequest
// @next Success
// @next Failure
type WordAck struct {
	Word             *string `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WordAck) Reset()                    { *m = WordAck{} }
func (m *WordAck) String() string            { return proto.CompactTextString(m) }
func (*WordAck) ProtoMessage()               {}
func (*WordAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *WordAck) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

// *
// Request: Ask device to sign message
// @next MessageSignature
// @next Failure
type SignMessage struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message          []byte   `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	CoinName         *string  `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SignMessage) Reset()                    { *m = SignMessage{} }
func (m *SignMessage) String() string            { return proto.CompactTextString(m) }
func (*SignMessage) ProtoMessage()               {}
func (*SignMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

const Default_SignMessage_CoinName string = "Bitcoin"

func (m *SignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *SignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SignMessage_CoinName
}

// *
// Request: Ask device to verify message
// @next Success
// @next Failure
type VerifyMessage struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message          []byte  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	CoinName         *string `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VerifyMessage) Reset()                    { *m = VerifyMessage{} }
func (m *VerifyMessage) String() string            { return proto.CompactTextString(m) }
func (*VerifyMessage) ProtoMessage()               {}
func (*VerifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

const Default_VerifyMessage_CoinName string = "Bitcoin"

func (m *VerifyMessage) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *VerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *VerifyMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_VerifyMessage_CoinName
}

// *
// Response: Signed message
// @prev SignMessage
type MessageSignature struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageSignature) Reset()                    { *m = MessageSignature{} }
func (m *MessageSignature) String() string            { return proto.CompactTextString(m) }
func (*MessageSignature) ProtoMessage()               {}
func (*MessageSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *MessageSignature) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *MessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// Request: Ask device to encrypt message
// @next EncryptedMessage
// @next Failure
type EncryptMessage struct {
	Pubkey           []byte   `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Message          []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DisplayOnly      *bool    `protobuf:"varint,3,opt,name=display_only,json=displayOnly" json:"display_only,omitempty"`
	AddressN         []uint32 `protobuf:"varint,4,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	CoinName         *string  `protobuf:"bytes,5,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EncryptMessage) Reset()                    { *m = EncryptMessage{} }
func (m *EncryptMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptMessage) ProtoMessage()               {}
func (*EncryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

const Default_EncryptMessage_CoinName string = "Bitcoin"

func (m *EncryptMessage) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *EncryptMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EncryptMessage) GetDisplayOnly() bool {
	if m != nil && m.DisplayOnly != nil {
		return *m.DisplayOnly
	}
	return false
}

func (m *EncryptMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EncryptMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_EncryptMessage_CoinName
}

// *
// Response: Encrypted message
// @prev EncryptMessage
type EncryptedMessage struct {
	Nonce            []byte `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	Message          []byte `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Hmac             []byte `protobuf:"bytes,3,opt,name=hmac" json:"hmac,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EncryptedMessage) Reset()                    { *m = EncryptedMessage{} }
func (m *EncryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptedMessage) ProtoMessage()               {}
func (*EncryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *EncryptedMessage) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EncryptedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EncryptedMessage) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

// *
// Request: Ask device to decrypt message
// @next Success
// @next Failure
type DecryptMessage struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce            []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	Message          []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Hmac             []byte   `protobuf:"bytes,4,opt,name=hmac" json:"hmac,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DecryptMessage) Reset()                    { *m = DecryptMessage{} }
func (m *DecryptMessage) String() string            { return proto.CompactTextString(m) }
func (*DecryptMessage) ProtoMessage()               {}
func (*DecryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DecryptMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *DecryptMessage) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *DecryptMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DecryptMessage) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

// *
// Response: Decrypted message
// @prev DecryptedMessage
type DecryptedMessage struct {
	Message          []byte  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecryptedMessage) Reset()                    { *m = DecryptedMessage{} }
func (m *DecryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*DecryptedMessage) ProtoMessage()               {}
func (*DecryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DecryptedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DecryptedMessage) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Request: Ask device to encrypt or decrypt value of given key
// @next CipheredKeyValue
// @next Failure
type CipherKeyValue struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Key              *string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value            []byte   `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Encrypt          *bool    `protobuf:"varint,4,opt,name=encrypt" json:"encrypt,omitempty"`
	AskOnEncrypt     *bool    `protobuf:"varint,5,opt,name=ask_on_encrypt,json=askOnEncrypt" json:"ask_on_encrypt,omitempty"`
	AskOnDecrypt     *bool    `protobuf:"varint,6,opt,name=ask_on_decrypt,json=askOnDecrypt" json:"ask_on_decrypt,omitempty"`
	Iv               []byte   `protobuf:"bytes,7,opt,name=iv" json:"iv,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CipherKeyValue) Reset()                    { *m = CipherKeyValue{} }
func (m *CipherKeyValue) String() string            { return proto.CompactTextString(m) }
func (*CipherKeyValue) ProtoMessage()               {}
func (*CipherKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CipherKeyValue) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *CipherKeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CipherKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CipherKeyValue) GetEncrypt() bool {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return false
}

func (m *CipherKeyValue) GetAskOnEncrypt() bool {
	if m != nil && m.AskOnEncrypt != nil {
		return *m.AskOnEncrypt
	}
	return false
}

func (m *CipherKeyValue) GetAskOnDecrypt() bool {
	if m != nil && m.AskOnDecrypt != nil {
		return *m.AskOnDecrypt
	}
	return false
}

func (m *CipherKeyValue) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

// *
// Response: Return ciphered/deciphered value
// @prev CipherKeyValue
type CipheredKeyValue struct {
	Value            []byte `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CipheredKeyValue) Reset()                    { *m = CipheredKeyValue{} }
func (m *CipheredKeyValue) String() string            { return proto.CompactTextString(m) }
func (*CipheredKeyValue) ProtoMessage()               {}
func (*CipheredKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CipheredKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// *
// Request:  Estimated size of the transaction
// This behaves exactly like SignTx, which means that it can ask using TxRequest
// This call is non-blocking (except possible PassphraseRequest to unlock the seed)
// @next TxSize
// @next Failure
type EstimateTxSize struct {
	OutputsCount     *uint32 `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	InputsCount      *uint32 `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	CoinName         *string `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EstimateTxSize) Reset()                    { *m = EstimateTxSize{} }
func (m *EstimateTxSize) String() string            { return proto.CompactTextString(m) }
func (*EstimateTxSize) ProtoMessage()               {}
func (*EstimateTxSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

const Default_EstimateTxSize_CoinName string = "Bitcoin"

func (m *EstimateTxSize) GetOutputsCount() uint32 {
	if m != nil && m.OutputsCount != nil {
		return *m.OutputsCount
	}
	return 0
}

func (m *EstimateTxSize) GetInputsCount() uint32 {
	if m != nil && m.InputsCount != nil {
		return *m.InputsCount
	}
	return 0
}

func (m *EstimateTxSize) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_EstimateTxSize_CoinName
}

// *
// Response: Estimated size of the transaction
// @prev EstimateTxSize
type TxSize struct {
	TxSize           *uint32 `protobuf:"varint,1,opt,name=tx_size,json=txSize" json:"tx_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxSize) Reset()                    { *m = TxSize{} }
func (m *TxSize) String() string            { return proto.CompactTextString(m) }
func (*TxSize) ProtoMessage()               {}
func (*TxSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *TxSize) GetTxSize() uint32 {
	if m != nil && m.TxSize != nil {
		return *m.TxSize
	}
	return 0
}

// *
// Request: Ask device to sign transaction
// @next PassphraseRequest
// @next PinMatrixRequest
// @next TxRequest
// @next Failure
type SignTx struct {
	OutputsCount     *uint32 `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	InputsCount      *uint32 `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	CoinName         *string `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	Version          *uint32 `protobuf:"varint,4,opt,name=version,def=1" json:"version,omitempty"`
	LockTime         *uint32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTx) Reset()                    { *m = SignTx{} }
func (m *SignTx) String() string            { return proto.CompactTextString(m) }
func (*SignTx) ProtoMessage()               {}
func (*SignTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

const Default_SignTx_CoinName string = "Bitcoin"
const Default_SignTx_Version uint32 = 1
const Default_SignTx_LockTime uint32 = 0

func (m *SignTx) GetOutputsCount() uint32 {
	if m != nil && m.OutputsCount != nil {
		return *m.OutputsCount
	}
	return 0
}

func (m *SignTx) GetInputsCount() uint32 {
	if m != nil && m.InputsCount != nil {
		return *m.InputsCount
	}
	return 0
}

func (m *SignTx) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SignTx_CoinName
}

func (m *SignTx) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_SignTx_Version
}

func (m *SignTx) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return Default_SignTx_LockTime
}

// *
// Request: Simplified transaction signing
// This method doesn't support streaming, so there are hardware limits in number of inputs and outputs.
// In case of success, the result is returned using TxRequest message.
// @next PassphraseRequest
// @next PinMatrixRequest
// @next TxRequest
// @next Failure
type SimpleSignTx struct {
	Inputs           []*types.TxInputType     `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs          []*types.TxOutputType    `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
	Transactions     []*types.TransactionType `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	CoinName         *string                  `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	Version          *uint32                  `protobuf:"varint,5,opt,name=version,def=1" json:"version,omitempty"`
	LockTime         *uint32                  `protobuf:"varint,6,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *SimpleSignTx) Reset()                    { *m = SimpleSignTx{} }
func (m *SimpleSignTx) String() string            { return proto.CompactTextString(m) }
func (*SimpleSignTx) ProtoMessage()               {}
func (*SimpleSignTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

const Default_SimpleSignTx_CoinName string = "Bitcoin"
const Default_SimpleSignTx_Version uint32 = 1
const Default_SimpleSignTx_LockTime uint32 = 0

func (m *SimpleSignTx) GetInputs() []*types.TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SimpleSignTx) GetOutputs() []*types.TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *SimpleSignTx) GetTransactions() []*types.TransactionType {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *SimpleSignTx) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SimpleSignTx_CoinName
}

func (m *SimpleSignTx) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_SimpleSignTx_Version
}

func (m *SimpleSignTx) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return Default_SimpleSignTx_LockTime
}

// *
// Response: Device asks for information for signing transaction or returns the last result
// If request_index is set, device awaits TxAck message (with fields filled in according to request_type)
// If signature_index is set, 'signature' contains signed input of signature_index's input
// @prev SignTx
// @prev SimpleSignTx
// @prev TxAck
type TxRequest struct {
	RequestType      *types.RequestType             `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=RequestType" json:"request_type,omitempty"`
	Details          *types.TxRequestDetailsType    `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	Serialized       *types.TxRequestSerializedType `protobuf:"bytes,3,opt,name=serialized" json:"serialized,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *TxRequest) Reset()                    { *m = TxRequest{} }
func (m *TxRequest) String() string            { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()               {}
func (*TxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *TxRequest) GetRequestType() types.RequestType {
	if m != nil && m.RequestType != nil {
		return *m.RequestType
	}
	return types.RequestType_TXINPUT
}

func (m *TxRequest) GetDetails() *types.TxRequestDetailsType {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *TxRequest) GetSerialized() *types.TxRequestSerializedType {
	if m != nil {
		return m.Serialized
	}
	return nil
}

// *
// Request: Reported transaction data
// @prev TxRequest
// @next TxRequest
type TxAck struct {
	Tx               *types.TransactionType `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *TxAck) Reset()                    { *m = TxAck{} }
func (m *TxAck) String() string            { return proto.CompactTextString(m) }
func (*TxAck) ProtoMessage()               {}
func (*TxAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *TxAck) GetTx() *types.TransactionType {
	if m != nil {
		return m.Tx
	}
	return nil
}

// *
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @next PassphraseRequest
// @next PinMatrixRequest
// @next EthereumTxRequest
// @next Failure
type EthereumSignTx struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce            []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice         []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit         []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	To               []byte   `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
	Value            []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength       *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumSignTx) Reset()                    { *m = EthereumSignTx{} }
func (m *EthereumSignTx) String() string            { return proto.CompactTextString(m) }
func (*EthereumSignTx) ProtoMessage()               {}
func (*EthereumSignTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *EthereumSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EthereumSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *EthereumSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *EthereumSignTx) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *EthereumSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EthereumSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *EthereumSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

// *
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @prev EthereumSignTx
// @next EthereumTxAck
type EthereumTxRequest struct {
	DataLength       *uint32 `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV       *uint32 `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR       []byte  `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS       []byte  `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumTxRequest) Reset()                    { *m = EthereumTxRequest{} }
func (m *EthereumTxRequest) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxRequest) ProtoMessage()               {}
func (*EthereumTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *EthereumTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *EthereumTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

// *
// Request: Transaction payload data.
// @prev EthereumTxRequest
// @next EthereumTxRequest
type EthereumTxAck struct {
	DataChunk        []byte `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EthereumTxAck) Reset()                    { *m = EthereumTxAck{} }
func (m *EthereumTxAck) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxAck) ProtoMessage()               {}
func (*EthereumTxAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *EthereumTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

// *
// Request: Ask device to sign identity
// @next SignedIdentity
// @next Failure
type SignIdentity struct {
	Identity         *types.IdentityType `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	ChallengeHidden  []byte              `protobuf:"bytes,2,opt,name=challenge_hidden,json=challengeHidden" json:"challenge_hidden,omitempty"`
	ChallengeVisual  *string             `protobuf:"bytes,3,opt,name=challenge_visual,json=challengeVisual" json:"challenge_visual,omitempty"`
	EcdsaCurveName   *string             `protobuf:"bytes,4,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *SignIdentity) Reset()                    { *m = SignIdentity{} }
func (m *SignIdentity) String() string            { return proto.CompactTextString(m) }
func (*SignIdentity) ProtoMessage()               {}
func (*SignIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SignIdentity) GetIdentity() *types.IdentityType {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *SignIdentity) GetChallengeHidden() []byte {
	if m != nil {
		return m.ChallengeHidden
	}
	return nil
}

func (m *SignIdentity) GetChallengeVisual() string {
	if m != nil && m.ChallengeVisual != nil {
		return *m.ChallengeVisual
	}
	return ""
}

func (m *SignIdentity) GetEcdsaCurveName() string {
	if m != nil && m.EcdsaCurveName != nil {
		return *m.EcdsaCurveName
	}
	return ""
}

// *
// Response: Device provides signed identity
// @prev SignIdentity
type SignedIdentity struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Signature        []byte  `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedIdentity) Reset()                    { *m = SignedIdentity{} }
func (m *SignedIdentity) String() string            { return proto.CompactTextString(m) }
func (*SignedIdentity) ProtoMessage()               {}
func (*SignedIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *SignedIdentity) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *SignedIdentity) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedIdentity) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// Request: Ask device to generate ECDH session key
// @next ECDHSessionKey
// @next Failure
type GetECDHSessionKey struct {
	Identity         *types.IdentityType `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	PeerPublicKey    []byte              `protobuf:"bytes,2,opt,name=peer_public_key,json=peerPublicKey" json:"peer_public_key,omitempty"`
	EcdsaCurveName   *string             `protobuf:"bytes,3,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetECDHSessionKey) Reset()                    { *m = GetECDHSessionKey{} }
func (m *GetECDHSessionKey) String() string            { return proto.CompactTextString(m) }
func (*GetECDHSessionKey) ProtoMessage()               {}
func (*GetECDHSessionKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *GetECDHSessionKey) GetIdentity() *types.IdentityType {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *GetECDHSessionKey) GetPeerPublicKey() []byte {
	if m != nil {
		return m.PeerPublicKey
	}
	return nil
}

func (m *GetECDHSessionKey) GetEcdsaCurveName() string {
	if m != nil && m.EcdsaCurveName != nil {
		return *m.EcdsaCurveName
	}
	return ""
}

// *
// Response: Device provides ECDH session key
// @prev GetECDHSessionKey
type ECDHSessionKey struct {
	SessionKey       []byte `protobuf:"bytes,1,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ECDHSessionKey) Reset()                    { *m = ECDHSessionKey{} }
func (m *ECDHSessionKey) String() string            { return proto.CompactTextString(m) }
func (*ECDHSessionKey) ProtoMessage()               {}
func (*ECDHSessionKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ECDHSessionKey) GetSessionKey() []byte {
	if m != nil {
		return m.SessionKey
	}
	return nil
}

// *
// Request: Set U2F counter
// @next Success
type SetU2FCounter struct {
	U2FCounter       *uint32 `protobuf:"varint,1,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetU2FCounter) Reset()                    { *m = SetU2FCounter{} }
func (m *SetU2FCounter) String() string            { return proto.CompactTextString(m) }
func (*SetU2FCounter) ProtoMessage()               {}
func (*SetU2FCounter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *SetU2FCounter) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

// *
// Request: Ask device to erase its firmware
// @next Success
// @next Failure
type FirmwareErase struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FirmwareErase) Reset()                    { *m = FirmwareErase{} }
func (m *FirmwareErase) String() string            { return proto.CompactTextString(m) }
func (*FirmwareErase) ProtoMessage()               {}
func (*FirmwareErase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

// *
// Request: Send firmware in binary form to the device
// @next Success
// @next Failure
type FirmwareUpload struct {
	Payload          []byte `protobuf:"bytes,1,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FirmwareUpload) Reset()                    { *m = FirmwareUpload{} }
func (m *FirmwareUpload) String() string            { return proto.CompactTextString(m) }
func (*FirmwareUpload) ProtoMessage()               {}
func (*FirmwareUpload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *FirmwareUpload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// *
// Request: "Press" the button on the device
// @next Success
type DebugLinkDecision struct {
	YesNo            *bool  `protobuf:"varint,1,req,name=yes_no,json=yesNo" json:"yes_no,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkDecision) Reset()                    { *m = DebugLinkDecision{} }
func (m *DebugLinkDecision) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkDecision) ProtoMessage()               {}
func (*DebugLinkDecision) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *DebugLinkDecision) GetYesNo() bool {
	if m != nil && m.YesNo != nil {
		return *m.YesNo
	}
	return false
}

// *
// Request: Computer asks for device state
// @next DebugLinkState
type DebugLinkGetState struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkGetState) Reset()                    { *m = DebugLinkGetState{} }
func (m *DebugLinkGetState) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkGetState) ProtoMessage()               {}
func (*DebugLinkGetState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

// *
// Response: Device current state
// @prev DebugLinkGetState
type DebugLinkState struct {
	Layout               []byte            `protobuf:"bytes,1,opt,name=layout" json:"layout,omitempty"`
	Pin                  *string           `protobuf:"bytes,2,opt,name=pin" json:"pin,omitempty"`
	Matrix               *string           `protobuf:"bytes,3,opt,name=matrix" json:"matrix,omitempty"`
	Mnemonic             *string           `protobuf:"bytes,4,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                 *types.HDNodeType `protobuf:"bytes,5,opt,name=node" json:"node,omitempty"`
	PassphraseProtection *bool             `protobuf:"varint,6,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	ResetWord            *string           `protobuf:"bytes,7,opt,name=reset_word,json=resetWord" json:"reset_word,omitempty"`
	ResetEntropy         []byte            `protobuf:"bytes,8,opt,name=reset_entropy,json=resetEntropy" json:"reset_entropy,omitempty"`
	RecoveryFakeWord     *string           `protobuf:"bytes,9,opt,name=recovery_fake_word,json=recoveryFakeWord" json:"recovery_fake_word,omitempty"`
	RecoveryWordPos      *uint32           `protobuf:"varint,10,opt,name=recovery_word_pos,json=recoveryWordPos" json:"recovery_word_pos,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *DebugLinkState) Reset()                    { *m = DebugLinkState{} }
func (m *DebugLinkState) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkState) ProtoMessage()               {}
func (*DebugLinkState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *DebugLinkState) GetLayout() []byte {
	if m != nil {
		return m.Layout
	}
	return nil
}

func (m *DebugLinkState) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *DebugLinkState) GetMatrix() string {
	if m != nil && m.Matrix != nil {
		return *m.Matrix
	}
	return ""
}

func (m *DebugLinkState) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *DebugLinkState) GetNode() *types.HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *DebugLinkState) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *DebugLinkState) GetResetWord() string {
	if m != nil && m.ResetWord != nil {
		return *m.ResetWord
	}
	return ""
}

func (m *DebugLinkState) GetResetEntropy() []byte {
	if m != nil {
		return m.ResetEntropy
	}
	return nil
}

func (m *DebugLinkState) GetRecoveryFakeWord() string {
	if m != nil && m.RecoveryFakeWord != nil {
		return *m.RecoveryFakeWord
	}
	return ""
}

func (m *DebugLinkState) GetRecoveryWordPos() uint32 {
	if m != nil && m.RecoveryWordPos != nil {
		return *m.RecoveryWordPos
	}
	return 0
}

// *
// Request: Ask device to restart
type DebugLinkStop struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkStop) Reset()                    { *m = DebugLinkStop{} }
func (m *DebugLinkStop) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkStop) ProtoMessage()               {}
func (*DebugLinkStop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

// *
// Response: Device wants host to log event
type DebugLinkLog struct {
	Level            *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Bucket           *string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Text             *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkLog) Reset()                    { *m = DebugLinkLog{} }
func (m *DebugLinkLog) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkLog) ProtoMessage()               {}
func (*DebugLinkLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *DebugLinkLog) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *DebugLinkLog) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *DebugLinkLog) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// *
// Request: Read memory from device
// @next DebugLinkMemory
type DebugLinkMemoryRead struct {
	Address          *uint32 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Length           *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkMemoryRead) Reset()                    { *m = DebugLinkMemoryRead{} }
func (m *DebugLinkMemoryRead) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkMemoryRead) ProtoMessage()               {}
func (*DebugLinkMemoryRead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *DebugLinkMemoryRead) GetAddress() uint32 {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return 0
}

func (m *DebugLinkMemoryRead) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// *
// Response: Device sends memory back
// @prev DebugLinkMemoryRead
type DebugLinkMemory struct {
	Memory           []byte `protobuf:"bytes,1,opt,name=memory" json:"memory,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkMemory) Reset()                    { *m = DebugLinkMemory{} }
func (m *DebugLinkMemory) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkMemory) ProtoMessage()               {}
func (*DebugLinkMemory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *DebugLinkMemory) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

// *
// Request: Write memory to device.  WARNING: Writing to the wrong
// location can irreparably break the device.
type DebugLinkMemoryWrite struct {
	Address          *uint32 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Memory           []byte  `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Flash            *bool   `protobuf:"varint,3,opt,name=flash" json:"flash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkMemoryWrite) Reset()                    { *m = DebugLinkMemoryWrite{} }
func (m *DebugLinkMemoryWrite) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkMemoryWrite) ProtoMessage()               {}
func (*DebugLinkMemoryWrite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *DebugLinkMemoryWrite) GetAddress() uint32 {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return 0
}

func (m *DebugLinkMemoryWrite) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *DebugLinkMemoryWrite) GetFlash() bool {
	if m != nil && m.Flash != nil {
		return *m.Flash
	}
	return false
}

// *
// Request: Erase block of flash on device.  WARNING: Writing to the wrong
// location can irreparably break the device.
type DebugLinkFlashErase struct {
	Sector           *uint32 `protobuf:"varint,1,opt,name=sector" json:"sector,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkFlashErase) Reset()                    { *m = DebugLinkFlashErase{} }
func (m *DebugLinkFlashErase) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkFlashErase) ProtoMessage()               {}
func (*DebugLinkFlashErase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *DebugLinkFlashErase) GetSector() uint32 {
	if m != nil && m.Sector != nil {
		return *m.Sector
	}
	return 0
}

func init() {
	proto.RegisterType((*Initialize)(nil), "Initialize")
	proto.RegisterType((*GetFeatures)(nil), "GetFeatures")
	proto.RegisterType((*Features)(nil), "Features")
	proto.RegisterType((*ClearSession)(nil), "ClearSession")
	proto.RegisterType((*ApplySettings)(nil), "ApplySettings")
	proto.RegisterType((*ChangePin)(nil), "ChangePin")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Success)(nil), "Success")
	proto.RegisterType((*Failure)(nil), "Failure")
	proto.RegisterType((*ButtonRequest)(nil), "ButtonRequest")
	proto.RegisterType((*ButtonAck)(nil), "ButtonAck")
	proto.RegisterType((*PinMatrixRequest)(nil), "PinMatrixRequest")
	proto.RegisterType((*PinMatrixAck)(nil), "PinMatrixAck")
	proto.RegisterType((*Cancel)(nil), "Cancel")
	proto.RegisterType((*PassphraseRequest)(nil), "PassphraseRequest")
	proto.RegisterType((*PassphraseAck)(nil), "PassphraseAck")
	proto.RegisterType((*GetEntropy)(nil), "GetEntropy")
	proto.RegisterType((*Entropy)(nil), "Entropy")
	proto.RegisterType((*GetPublicKey)(nil), "GetPublicKey")
	proto.RegisterType((*PublicKey)(nil), "PublicKey")
	proto.RegisterType((*GetAddress)(nil), "GetAddress")
	proto.RegisterType((*EthereumGetAddress)(nil), "EthereumGetAddress")
	proto.RegisterType((*Address)(nil), "Address")
	proto.RegisterType((*EthereumAddress)(nil), "EthereumAddress")
	proto.RegisterType((*WipeDevice)(nil), "WipeDevice")
	proto.RegisterType((*LoadDevice)(nil), "LoadDevice")
	proto.RegisterType((*ResetDevice)(nil), "ResetDevice")
	proto.RegisterType((*EntropyRequest)(nil), "EntropyRequest")
	proto.RegisterType((*EntropyAck)(nil), "EntropyAck")
	proto.RegisterType((*RecoveryDevice)(nil), "RecoveryDevice")
	proto.RegisterType((*WordRequest)(nil), "WordRequest")
	proto.RegisterType((*WordAck)(nil), "WordAck")
	proto.RegisterType((*SignMessage)(nil), "SignMessage")
	proto.RegisterType((*VerifyMessage)(nil), "VerifyMessage")
	proto.RegisterType((*MessageSignature)(nil), "MessageSignature")
	proto.RegisterType((*EncryptMessage)(nil), "EncryptMessage")
	proto.RegisterType((*EncryptedMessage)(nil), "EncryptedMessage")
	proto.RegisterType((*DecryptMessage)(nil), "DecryptMessage")
	proto.RegisterType((*DecryptedMessage)(nil), "DecryptedMessage")
	proto.RegisterType((*CipherKeyValue)(nil), "CipherKeyValue")
	proto.RegisterType((*CipheredKeyValue)(nil), "CipheredKeyValue")
	proto.RegisterType((*EstimateTxSize)(nil), "EstimateTxSize")
	proto.RegisterType((*TxSize)(nil), "TxSize")
	proto.RegisterType((*SignTx)(nil), "SignTx")
	proto.RegisterType((*SimpleSignTx)(nil), "SimpleSignTx")
	proto.RegisterType((*TxRequest)(nil), "TxRequest")
	proto.RegisterType((*TxAck)(nil), "TxAck")
	proto.RegisterType((*EthereumSignTx)(nil), "EthereumSignTx")
	proto.RegisterType((*EthereumTxRequest)(nil), "EthereumTxRequest")
	proto.RegisterType((*EthereumTxAck)(nil), "EthereumTxAck")
	proto.RegisterType((*SignIdentity)(nil), "SignIdentity")
	proto.RegisterType((*SignedIdentity)(nil), "SignedIdentity")
	proto.RegisterType((*GetECDHSessionKey)(nil), "GetECDHSessionKey")
	proto.RegisterType((*ECDHSessionKey)(nil), "ECDHSessionKey")
	proto.RegisterType((*SetU2FCounter)(nil), "SetU2FCounter")
	proto.RegisterType((*FirmwareErase)(nil), "FirmwareErase")
	proto.RegisterType((*FirmwareUpload)(nil), "FirmwareUpload")
	proto.RegisterType((*DebugLinkDecision)(nil), "DebugLinkDecision")
	proto.RegisterType((*DebugLinkGetState)(nil), "DebugLinkGetState")
	proto.RegisterType((*DebugLinkState)(nil), "DebugLinkState")
	proto.RegisterType((*DebugLinkStop)(nil), "DebugLinkStop")
	proto.RegisterType((*DebugLinkLog)(nil), "DebugLinkLog")
	proto.RegisterType((*DebugLinkMemoryRead)(nil), "DebugLinkMemoryRead")
	proto.RegisterType((*DebugLinkMemory)(nil), "DebugLinkMemory")
	proto.RegisterType((*DebugLinkMemoryWrite)(nil), "DebugLinkMemoryWrite")
	proto.RegisterType((*DebugLinkFlashErase)(nil), "DebugLinkFlashErase")
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
}

var fileDescriptor0 = []byte{
	// 2972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x5a, 0xbd, 0x77, 0xdc, 0xc6,
	0x11, 0xcf, 0x7d, 0xf0, 0x78, 0x37, 0xf7, 0xc1, 0x25, 0x24, 0xda, 0x67, 0xca, 0x92, 0x68, 0x48,
	0x96, 0x25, 0xd9, 0x3e, 0xcb, 0xf4, 0x47, 0x1c, 0x25, 0x4e, 0x62, 0x91, 0xa2, 0xa5, 0x58, 0x92,
	0xf9, 0x40, 0x5a, 0xee, 0x72, 0x0f, 0xc4, 0x2d, 0xef, 0x60, 0xde, 0x01, 0x30, 0x80, 0xa3, 0x49,
	0x17, 0x69, 0x93, 0xd2, 0x5d, 0x52, 0xa6, 0x8b, 0x53, 0xe7, 0xa5, 0xc8, 0xdf, 0x90, 0x3a, 0xff,
	0x40, 0xaa, 0x14, 0x29, 0x92, 0x14, 0xa9, 0x33, 0xbb, 0x3b, 0x00, 0x16, 0x20, 0x8e, 0x96, 0x55,
	0xa4, 0xe1, 0xc3, 0xce, 0xfe, 0x76, 0x76, 0x76, 0x66, 0x76, 0x76, 0x66, 0x8e, 0xd0, 0x9b, 0xf1,
	0x28, 0xb2, 0xc7, 0x3c, 0x1a, 0x04, 0xa1, 0x1f, 0xfb, 0xeb, 0xed, 0xf8, 0x34, 0x48, 0x06, 0x66,
	0x07, 0xe0, 0xa1, 0xe7, 0xc6, 0xae, 0x3d, 0x75, 0xbf, 0xe6, 0x66, 0x17, 0xda, 0x1f, 0xf3, 0x78,
	0x87, 0xdb, 0xf1, 0x3c, 0xe4, 0x91, 0xf9, 0xb7, 0x3a, 0x34, 0x93, 0x81, 0xf1, 0x02, 0x34, 0x8e,
	0xb9, 0x37, 0xf2, 0xc3, 0x7e, 0x65, 0xa3, 0x72, 0xb3, 0x65, 0xd1, 0xc8, 0xb8, 0x06, 0xdd, 0x99,
	0xfd, 0x85, 0x1f, 0x0e, 0x8f, 0x79, 0x18, 0xb9, 0xbe, 0xd7, 0xaf, 0xe2, 0x74, 0xd7, 0xea, 0x48,
	0xe2, 0x53, 0x45, 0x93, 0x20, 0xd7, 0xd3, 0x40, 0x35, 0x02, 0x09, 0xa2, 0x06, 0x0a, 0xec, 0xd8,
	0x99, 0xa4, 0xa0, 0xba, 0x02, 0x49, 0x62, 0x02, 0x7a, 0x0d, 0x56, 0x0e, 0x7c, 0x3f, 0x9e, 0xfa,
	0xf6, 0x88, 0x87, 0xc3, 0x99, 0x3f, 0xe2, 0xfd, 0x25, 0x84, 0x35, 0xad, 0x5e, 0x46, 0x7e, 0x8c,
	0x54, 0xe3, 0x12, 0xb4, 0x46, 0xfc, 0xd8, 0x75, 0xf8, 0xd0, 0x1d, 0xf5, 0x1b, 0x52, 0xe4, 0xa6,
	0x22, 0x3c, 0x1c, 0x19, 0xaf, 0x42, 0x2f, 0x70, 0xbd, 0xa1, 0xd0, 0x01, 0x77, 0x62, 0xb1, 0xd7,
	0xb2, 0x64, 0xd2, 0x45, 0xea, 0x6e, 0x4a, 0x34, 0xde, 0x81, 0xb5, 0xc0, 0x8e, 0xa2, 0x60, 0x12,
	0xda, 0x11, 0xd7, 0xd1, 0x4d, 0x89, 0xbe, 0x98, 0x4d, 0x6a, 0x8b, 0xd6, 0xa1, 0x39, 0xb5, 0xbd,
	0xf1, 0x1c, 0x55, 0xde, 0x6f, 0xa9, 0x7d, 0x93, 0xb1, 0x71, 0x11, 0x96, 0xa6, 0xf6, 0x01, 0x9f,
	0xf6, 0x41, 0x4e, 0xa8, 0x81, 0x71, 0x15, 0x96, 0x1c, 0xdf, 0xf5, 0xa2, 0x7e, 0x7b, 0xa3, 0x76,
	0xb3, 0xbd, 0xd9, 0x1a, 0x6c, 0xe1, 0x68, 0x1f, 0xad, 0x64, 0x29, 0xba, 0xb1, 0x01, 0x6d, 0x37,
	0xb5, 0xd2, 0xa8, 0xdf, 0x91, 0xbb, 0xeb, 0x24, 0xb1, 0x69, 0x88, 0x87, 0x93, 0x6a, 0xeb, 0xe2,
	0x74, 0xc7, 0x4a, 0xc7, 0x05, 0x95, 0x4d, 0xec, 0x68, 0xd2, 0xef, 0x49, 0x88, 0xa6, 0xb2, 0x07,
	0x48, 0x15, 0x4c, 0xdc, 0x59, 0xe0, 0x87, 0x31, 0xee, 0xb1, 0x22, 0xf7, 0x48, 0xc7, 0xc6, 0x65,
	0x00, 0xa1, 0x31, 0xc7, 0x76, 0x26, 0x38, 0xcb, 0xe4, 0x6c, 0x0b, 0x29, 0x5b, 0x92, 0x60, 0xbc,
	0x0e, 0xab, 0x9a, 0xa6, 0x08, 0xb5, 0x2a, 0x51, 0x2c, 0x9b, 0x50, 0x60, 0xb3, 0x07, 0x9d, 0xad,
	0x29, 0xb7, 0xc3, 0x3d, 0x74, 0x4c, 0x14, 0xd0, 0xfc, 0x4d, 0x05, 0xba, 0x1f, 0x05, 0xc1, 0xf4,
	0x74, 0x8f, 0xc7, 0xb1, 0xeb, 0x8d, 0xa3, 0x9c, 0x0e, 0x2b, 0x8b, 0x74, 0x58, 0xd5, 0x75, 0x88,
	0x16, 0x9d, 0x0b, 0x1b, 0xa5, 0x7b, 0x49, 0x17, 0x43, 0x8b, 0x22, 0x75, 0x37, 0x25, 0x1a, 0x57,
	0x00, 0x26, 0x3e, 0x5e, 0x08, 0x27, 0xe4, 0x5c, 0x39, 0x58, 0xc7, 0xd2, 0x28, 0xe6, 0x35, 0x68,
	0x6d, 0x4d, 0x70, 0x27, 0xbe, 0xeb, 0x7a, 0xc2, 0xe5, 0x43, 0x3e, 0xf3, 0x8f, 0x95, 0x0c, 0x4d,
	0x8b, 0x46, 0xe6, 0x1f, 0x2b, 0x50, 0xc7, 0xf9, 0xb1, 0xd1, 0x87, 0x65, 0xba, 0x5c, 0x24, 0x65,
	0x32, 0x14, 0xfa, 0x38, 0x98, 0xc7, 0xb1, 0x9f, 0xf3, 0xb1, 0xaa, 0xd2, 0x87, 0x9a, 0xd0, 0x3c,
	0xe6, 0xac, 0x37, 0xd6, 0xbe, 0x97, 0x37, 0xd6, 0x17, 0x7b, 0x23, 0x1e, 0x68, 0x79, 0x6f, 0xee,
	0x38, 0x28, 0xd6, 0x62, 0x69, 0xcd, 0xfb, 0xb0, 0xbc, 0x63, 0xbb, 0x53, 0xbc, 0xe7, 0xe8, 0x6a,
	0x75, 0x47, 0x5c, 0x2a, 0x81, 0xe8, 0x6d, 0x76, 0x06, 0x44, 0x97, 0xde, 0x28, 0x67, 0x74, 0x36,
	0xd5, 0x3c, 0x9b, 0x4f, 0xa0, 0x7b, 0x4f, 0x9e, 0xcd, 0xe2, 0x5f, 0xce, 0x79, 0x14, 0x1b, 0x37,
	0x72, 0xcc, 0x8c, 0x41, 0x6e, 0x56, 0x63, 0x69, 0x40, 0x7d, 0x64, 0xc7, 0x36, 0xf1, 0x93, 0xdf,
	0x66, 0x1b, 0x5a, 0x0a, 0xfe, 0x91, 0x73, 0x64, 0x7e, 0x08, 0x0c, 0x15, 0xfe, 0xd8, 0x8e, 0x43,
	0xf7, 0x24, 0x61, 0x7e, 0x0b, 0xea, 0x22, 0x92, 0x11, 0xf3, 0xb5, 0x41, 0x11, 0xa0, 0xf8, 0x0b,
	0x88, 0xb9, 0x01, 0x9d, 0x74, 0x16, 0xd9, 0x19, 0x0c, 0x6a, 0xa8, 0x5a, 0x5c, 0x59, 0xc5, 0xed,
	0xc4, 0xa7, 0xd9, 0x84, 0xc6, 0x96, 0xed, 0x39, 0x7c, 0x6a, 0x5e, 0x80, 0xd5, 0xcc, 0x5f, 0x88,
	0x95, 0xf9, 0x16, 0x74, 0x33, 0xa2, 0xe0, 0x80, 0x7e, 0xa4, 0xb9, 0x9a, 0x62, 0xa4, 0x51, 0x70,
	0x47, 0xc0, 0x48, 0x7a, 0xdf, 0x8b, 0x43, 0x3f, 0x38, 0x15, 0xe7, 0x8b, 0xf0, 0x9a, 0x4a, 0x5c,
	0xd7, 0x92, 0xdf, 0xc2, 0x30, 0xc9, 0x34, 0x6a, 0x94, 0xab, 0x4f, 0x89, 0xe8, 0x58, 0xc9, 0xd0,
	0x3c, 0x81, 0x0e, 0xb2, 0xd9, 0x9d, 0x1f, 0x4c, 0x5d, 0xe7, 0x13, 0x7e, 0x2a, 0x82, 0x9a, 0x3d,
	0x1a, 0x61, 0x38, 0x8e, 0x86, 0x42, 0xfc, 0x1a, 0x72, 0x6b, 0x12, 0xe1, 0x89, 0x71, 0x13, 0x18,
	0x77, 0x46, 0x91, 0x3d, 0x74, 0xe6, 0xe1, 0x31, 0x1f, 0x7a, 0xf6, 0x2c, 0xb1, 0x50, 0x4f, 0xd2,
	0xb7, 0x04, 0xf9, 0x09, 0x52, 0x8d, 0x57, 0xa0, 0x13, 0x4d, 0xfc, 0xaf, 0x86, 0x23, 0x37, 0x0a,
	0xa6, 0xf6, 0x29, 0xb9, 0x5b, 0x5b, 0xd0, 0xb6, 0x15, 0xc9, 0xfc, 0x39, 0xb4, 0xb2, 0x6d, 0xaf,
	0x42, 0xdd, 0x53, 0x76, 0xac, 0x62, 0x7c, 0x6a, 0x0f, 0x1e, 0x6c, 0x3f, 0xc1, 0xa1, 0x52, 0xb0,
	0x47, 0x06, 0x3c, 0x09, 0xe6, 0x07, 0x89, 0x01, 0xc5, 0xb7, 0xb8, 0x25, 0x42, 0x07, 0x1f, 0x29,
	0xf1, 0xce, 0x17, 0xfd, 0x3a, 0xb4, 0x44, 0xa4, 0xd3, 0x64, 0xbe, 0xbb, 0x7c, 0xcf, 0x8d, 0x05,
	0xcd, 0x6a, 0x8a, 0xbf, 0xcf, 0x28, 0xb6, 0xf1, 0x1e, 0x34, 0x67, 0xf3, 0x69, 0x8c, 0x81, 0x6f,
	0x2c, 0xaf, 0x45, 0x7b, 0xf3, 0xa5, 0xc1, 0x63, 0x22, 0x58, 0x7c, 0xc4, 0xf9, 0x6c, 0xcf, 0x09,
	0xdd, 0x40, 0x39, 0x47, 0x0a, 0x35, 0xf7, 0xc1, 0xb8, 0x1f, 0x4f, 0x78, 0xc8, 0xe7, 0xb3, 0x67,
	0x15, 0xb9, 0x28, 0x4c, 0xf5, 0xac, 0x0e, 0xd1, 0xc4, 0x09, 0x2b, 0x34, 0x31, 0xad, 0x24, 0x67,
	0x49, 0x86, 0xe6, 0xeb, 0xb0, 0x92, 0x6c, 0xbd, 0x00, 0xdc, 0xc9, 0xc0, 0xf8, 0x5c, 0x7f, 0xee,
	0x06, 0x7c, 0x5b, 0xbe, 0x63, 0xe6, 0xbf, 0x50, 0xc3, 0x8f, 0x30, 0x7c, 0xab, 0xa1, 0x08, 0x9a,
	0x33, 0x0f, 0x23, 0x94, 0xe7, 0x3a, 0x49, 0xd0, 0x4c, 0xc6, 0xa9, 0x05, 0xab, 0x52, 0x27, 0x25,
	0x16, 0xa4, 0x2b, 0x51, 0x93, 0xeb, 0xc4, 0xe7, 0x73, 0x85, 0x1b, 0x7c, 0xc3, 0xb3, 0xc0, 0xbd,
	0xa4, 0xec, 0xc8, 0xbd, 0xf1, 0xd4, 0x8d, 0x26, 0x65, 0x11, 0xbc, 0xa1, 0x47, 0x70, 0x7c, 0xfe,
	0xa3, 0x23, 0x37, 0x18, 0xe2, 0x13, 0xe1, 0x1c, 0x45, 0xf3, 0x19, 0x3d, 0xc9, 0x1d, 0x41, 0xdc,
	0x22, 0x9a, 0xf9, 0xcf, 0x0a, 0xb4, 0x2d, 0x1e, 0xf1, 0x98, 0xce, 0x8c, 0xa1, 0x93, 0x0c, 0x30,
	0x0c, 0x6d, 0xcc, 0x47, 0x66, 0x14, 0xaa, 0xbb, 0x44, 0xb5, 0x24, 0x11, 0x8f, 0xdf, 0x8c, 0xe2,
	0x10, 0x25, 0x89, 0x27, 0x2a, 0x3f, 0xb9, 0x5b, 0xdb, 0x7c, 0xef, 0x7d, 0x2b, 0x25, 0x2e, 0x3e,
	0x6c, 0xed, 0x9c, 0xc3, 0x9e, 0x8d, 0xdb, 0xf5, 0xb2, 0xb8, 0xfd, 0xfc, 0x3a, 0x31, 0x19, 0xf4,
	0x28, 0x48, 0x24, 0x91, 0xe8, 0x06, 0x00, 0x51, 0x44, 0x18, 0xca, 0x45, 0x8e, 0x8a, 0x1e, 0x39,
	0xfe, 0x5d, 0x81, 0x9e, 0xc5, 0x1d, 0x7c, 0xae, 0xc2, 0x53, 0xd2, 0x15, 0x3e, 0xe1, 0x5f, 0xf9,
	0xe1, 0x68, 0xe8, 0xf8, 0x73, 0x2f, 0x96, 0xf8, 0xae, 0xd5, 0x12, 0x94, 0x2d, 0x41, 0x58, 0xac,
	0x82, 0xea, 0xf7, 0x52, 0x41, 0xed, 0xbb, 0x54, 0x50, 0xff, 0x4e, 0x15, 0x2c, 0xe9, 0x6e, 0x71,
	0x0b, 0xa3, 0x9a, 0x77, 0xe8, 0x87, 0x98, 0xc8, 0x09, 0x59, 0x71, 0x4d, 0x2c, 0x75, 0xd4, 0xb4,
	0x56, 0x88, 0xfe, 0x39, 0x91, 0x45, 0xfa, 0x2a, 0xbe, 0x13, 0x55, 0x5d, 0x86, 0x65, 0x31, 0x14,
	0x7a, 0xc2, 0xf8, 0x24, 0x16, 0xd3, 0xdd, 0x93, 0xdf, 0xe6, 0x17, 0xd0, 0xde, 0x73, 0xc7, 0xde,
	0x63, 0x7a, 0xb1, 0xcf, 0xbd, 0xec, 0xb9, 0x37, 0x4f, 0xde, 0xc8, 0xe4, 0xa1, 0xcf, 0x45, 0xae,
	0xda, 0x82, 0xc8, 0x65, 0xfe, 0x1a, 0x33, 0x1c, 0xcc, 0x60, 0xdd, 0xc3, 0xd3, 0x64, 0xbb, 0xdc,
	0x1d, 0xaf, 0x68, 0x01, 0xc1, 0x78, 0x19, 0x5a, 0x18, 0x92, 0x3c, 0x99, 0x76, 0x4b, 0xdd, 0x77,
	0xac, 0x8c, 0xa0, 0x4b, 0x52, 0x53, 0x16, 0x2f, 0x95, 0xa4, 0xbe, 0x48, 0x92, 0x5f, 0x00, 0x23,
	0x11, 0xf6, 0x74, 0x9e, 0xcf, 0x23, 0x8b, 0xf9, 0x6d, 0x45, 0xb8, 0xa7, 0x13, 0x9e, 0x06, 0x71,
	0x72, 0x2c, 0x4c, 0x99, 0x30, 0xf6, 0x1f, 0xf1, 0xc4, 0x1f, 0x69, 0x54, 0x4c, 0x1a, 0x34, 0xb1,
	0x31, 0x8e, 0x26, 0x37, 0xd8, 0xf7, 0xa6, 0x69, 0x50, 0x27, 0xda, 0xa7, 0x48, 0xca, 0x9b, 0xa6,
	0x7e, 0xde, 0xd3, 0xb1, 0xb4, 0xe8, 0xd8, 0x4f, 0x81, 0x91, 0xa4, 0x7c, 0x94, 0xc8, 0x8a, 0xfe,
	0xe6, 0xf9, 0xf8, 0xe6, 0x93, 0xa8, 0x6a, 0x70, 0x8e, 0xa4, 0xe8, 0x44, 0x93, 0x99, 0xed, 0x90,
	0xde, 0xe5, 0xb7, 0xf9, 0x25, 0xf4, 0xb6, 0x79, 0x4e, 0x03, 0xe7, 0xfa, 0x51, 0xba, 0x65, 0x75,
	0xc1, 0x96, 0xb5, 0xf2, 0x2d, 0xeb, 0xda, 0x96, 0x3b, 0xc0, 0x68, 0xcb, 0xec, 0x28, 0x85, 0xd4,
	0x4e, 0xe3, 0xa0, 0xd9, 0xb6, 0x9a, 0xb3, 0xad, 0xf9, 0x57, 0xb4, 0xde, 0x96, 0x1b, 0xe0, 0xd3,
	0x83, 0x4f, 0xfc, 0x53, 0x7b, 0x3a, 0xff, 0x0e, 0xd9, 0xf1, 0x85, 0x10, 0x76, 0x55, 0x5c, 0xc4,
	0xa7, 0x38, 0xcd, 0xb1, 0x58, 0x47, 0x52, 0xab, 0x81, 0x8a, 0x49, 0x52, 0x3e, 0x0a, 0x87, 0xc9,
	0x10, 0x4d, 0xd5, 0xb3, 0xa3, 0x23, 0x34, 0xf3, 0x30, 0x01, 0xa8, 0xd2, 0xad, 0x83, 0xd4, 0x4f,
	0xbd, 0xfb, 0x67, 0x50, 0x23, 0x75, 0x4c, 0xba, 0xee, 0x0a, 0x45, 0x47, 0x37, 0x7a, 0x50, 0x75,
	0x8f, 0xe5, 0x13, 0xd1, 0xb1, 0xf0, 0xcb, 0xc4, 0xe4, 0x47, 0x1d, 0x86, 0x8f, 0xd2, 0xe3, 0xa4,
	0xf2, 0x55, 0x34, 0xf9, 0xcc, 0x5f, 0xa1, 0xd3, 0x46, 0xb1, 0x3b, 0xb3, 0x63, 0xbe, 0x7f, 0xb2,
	0x87, 0xa9, 0x98, 0x78, 0x79, 0xfc, 0x79, 0x1c, 0xcc, 0xe3, 0x28, 0x8d, 0x8d, 0x22, 0x4f, 0xeb,
	0x10, 0x51, 0x85, 0x47, 0xf4, 0x53, 0xd7, 0xd3, 0x30, 0x55, 0x89, 0x69, 0x2b, 0x9a, 0x82, 0x3c,
	0x5b, 0x2c, 0x78, 0x05, 0x1a, 0xb4, 0xef, 0x8b, 0xb0, 0x1c, 0x9f, 0x0c, 0x29, 0x33, 0x14, 0xd1,
	0xb8, 0x11, 0xcb, 0x09, 0xf3, 0x4f, 0x15, 0x68, 0x88, 0xeb, 0xb9, 0x7f, 0xf2, 0xff, 0x95, 0x0d,
	0x1d, 0x60, 0x39, 0x57, 0x7c, 0xdf, 0xad, 0xbc, 0x6d, 0x25, 0x14, 0xcc, 0x79, 0x5b, 0x53, 0xdf,
	0x39, 0x1a, 0xa2, 0xee, 0xd4, 0x4d, 0xc3, 0xe9, 0x3b, 0x18, 0xbf, 0x91, 0xb6, 0x8f, 0x24, 0xf3,
	0xbf, 0x15, 0xe8, 0xec, 0x61, 0xc1, 0x38, 0xe5, 0x24, 0xfb, 0x75, 0x68, 0x28, 0x11, 0xa4, 0x2f,
	0xb5, 0xb1, 0x9a, 0xd8, 0x3f, 0x79, 0x28, 0x08, 0x32, 0xef, 0xa0, 0x39, 0x2c, 0x4f, 0x97, 0xe9,
	0x30, 0x28, 0xb7, 0x80, 0x75, 0x11, 0xf6, 0xa9, 0xa4, 0x48, 0x5c, 0x32, 0x6b, 0xbc, 0x0b, 0x9d,
	0x18, 0x1f, 0xf9, 0xc8, 0x96, 0x6f, 0x4a, 0x84, 0xa7, 0x10, 0x68, 0x36, 0xd8, 0xcf, 0x88, 0x72,
	0x41, 0x0e, 0xf5, 0x6c, 0x61, 0x51, 0x3f, 0xf8, 0xd2, 0xf9, 0x07, 0x6f, 0x9c, 0x3d, 0xf8, 0x1f,
	0x2a, 0xd0, 0xda, 0x4f, 0xeb, 0x92, 0xb7, 0xa0, 0x13, 0xaa, 0xcf, 0xa1, 0x56, 0x9f, 0x74, 0x06,
	0x7a, 0x59, 0xd2, 0x0e, 0xb3, 0x01, 0x2e, 0x58, 0x1e, 0xf1, 0x18, 0xeb, 0xac, 0x88, 0xd2, 0xb3,
	0xb5, 0x41, 0xca, 0x6d, 0x5b, 0x4d, 0x28, 0x45, 0x10, 0xca, 0xf8, 0x00, 0x20, 0xc2, 0xc7, 0x84,
	0xba, 0x01, 0x35, 0xb9, 0xa6, 0x9f, 0xad, 0xd9, 0x4b, 0xe7, 0xe4, 0x32, 0x0d, 0x6b, 0xde, 0x82,
	0xa5, 0x7d, 0x59, 0x01, 0x6d, 0x40, 0x35, 0x3e, 0x91, 0xa2, 0x95, 0x69, 0x10, 0xe7, 0xcc, 0xff,
	0x88, 0xe0, 0x4e, 0x89, 0x29, 0xd9, 0xf3, 0x39, 0x42, 0x1b, 0x2e, 0x19, 0xdb, 0x11, 0xe6, 0x07,
	0x98, 0x80, 0x50, 0x98, 0x68, 0x22, 0x61, 0x57, 0x8c, 0x93, 0xc9, 0xa9, 0x3b, 0x73, 0x63, 0x0a,
	0x71, 0x62, 0xf2, 0x91, 0x18, 0x8b, 0x0b, 0x1e, 0xfb, 0xd2, 0x18, 0x78, 0xc1, 0x63, 0x3f, 0xbb,
	0xcc, 0x0d, 0x3d, 0xd8, 0xbc, 0x01, 0x86, 0xa8, 0x16, 0x87, 0xd4, 0x0b, 0xc1, 0xe4, 0x71, 0xee,
	0x1d, 0x51, 0x58, 0x60, 0x62, 0x86, 0xba, 0x5b, 0x5b, 0x82, 0x8e, 0x69, 0x60, 0x5b, 0xa2, 0xa7,
	0x2a, 0x13, 0x6c, 0xca, 0x4b, 0x07, 0x82, 0xf4, 0x48, 0x52, 0xcc, 0xdf, 0x56, 0x60, 0x35, 0x39,
	0x74, 0x66, 0xd1, 0xc2, 0xb2, 0x4a, 0x71, 0x99, 0x00, 0xa4, 0xaf, 0xe2, 0xf0, 0x98, 0x3a, 0x60,
	0x90, 0x92, 0x9e, 0xe6, 0x01, 0x21, 0x29, 0x22, 0x03, 0x58, 0x79, 0x40, 0x94, 0x34, 0x26, 0x52,
	0xd2, 0x9e, 0x39, 0x80, 0x6e, 0x26, 0x98, 0xb0, 0x20, 0x66, 0x73, 0x52, 0x28, 0x75, 0x62, 0x15,
	0xe1, 0x5a, 0x82, 0x22, 0x8f, 0x6a, 0xfe, 0x45, 0x5e, 0xc6, 0xb1, 0xf7, 0x70, 0x84, 0x19, 0xa1,
	0x1b, 0x9f, 0x62, 0x1e, 0xd5, 0x74, 0xe9, 0x9b, 0xec, 0xde, 0x1d, 0x24, 0x93, 0xaa, 0x1a, 0x72,
	0x33, 0x28, 0x73, 0x26, 0xf6, 0x54, 0x1c, 0x97, 0x0f, 0x27, 0xee, 0x08, 0xe9, 0x64, 0xd5, 0x95,
	0x94, 0xfe, 0x40, 0x92, 0xf3, 0xd0, 0x63, 0x37, 0x9a, 0xdb, 0x53, 0xaa, 0x21, 0x32, 0xe8, 0x53,
	0x49, 0x2e, 0x2d, 0x4f, 0xeb, 0x65, 0xe5, 0xa9, 0x39, 0x86, 0x9e, 0x10, 0x9d, 0x8f, 0x52, 0xe1,
	0x17, 0x67, 0x28, 0xa2, 0x2f, 0x25, 0xeb, 0xd4, 0x61, 0xf2, 0x38, 0xa1, 0x1a, 0x82, 0xb4, 0x72,
	0xcd, 0x25, 0x30, 0xb5, 0x62, 0x02, 0xf3, 0x0d, 0x9a, 0x5b, 0x94, 0xe9, 0x5b, 0xdb, 0x0f, 0xa8,
	0x17, 0x25, 0xd6, 0x7c, 0x0f, 0x4d, 0xdd, 0x80, 0x95, 0x80, 0xf3, 0x70, 0x78, 0x46, 0x84, 0xae,
	0x20, 0x67, 0x05, 0x74, 0xd9, 0xd9, 0x6b, 0xa5, 0x67, 0x7f, 0x1b, 0x6f, 0x5d, 0x5e, 0x1c, 0xe1,
	0x1a, 0x6a, 0x34, 0xcc, 0xf2, 0x2a, 0x88, 0x52, 0x80, 0x79, 0x07, 0xba, 0x7b, 0x3c, 0xfe, 0x6c,
	0x73, 0x47, 0x46, 0x7a, 0x1e, 0x8a, 0x15, 0xf3, 0xcd, 0x43, 0xf5, 0x16, 0xf0, 0x30, 0xf1, 0x57,
	0x24, 0x11, 0xc0, 0x5c, 0x81, 0xee, 0x8e, 0x1b, 0xce, 0xbe, 0xb2, 0x43, 0x7e, 0x5f, 0xb6, 0x2b,
	0x6e, 0x43, 0x2f, 0x21, 0x7c, 0x16, 0x88, 0x8e, 0xa0, 0xd0, 0x78, 0x60, 0x9f, 0x8a, 0xcf, 0xa4,
	0x06, 0xa5, 0x21, 0x62, 0x57, 0xb7, 0xf9, 0xc1, 0x7c, 0xfc, 0xc8, 0xf5, 0x8e, 0xf0, 0x35, 0x56,
	0x3d, 0xc6, 0x35, 0x68, 0x9c, 0x72, 0x0c, 0x0b, 0xbe, 0x44, 0x37, 0xad, 0x25, 0x1c, 0x3d, 0xf1,
	0x45, 0x33, 0x25, 0xc5, 0xa2, 0xa2, 0xf7, 0x62, 0x7c, 0x74, 0xcd, 0xbf, 0x57, 0x45, 0xd2, 0x44,
	0x54, 0x49, 0x12, 0x69, 0x23, 0x26, 0x7b, 0x18, 0xe8, 0x93, 0xb4, 0x51, 0x8d, 0x92, 0xaa, 0xb4,
	0x9a, 0x55, 0xa5, 0x88, 0x9c, 0xc9, 0x3e, 0x0e, 0xe9, 0x8f, 0x46, 0xb9, 0xe2, 0xb7, 0xbe, 0xa0,
	0xf8, 0x5d, 0x5a, 0x54, 0xfc, 0x2e, 0x2c, 0x7d, 0x1a, 0xe7, 0x94, 0x3e, 0xe8, 0x79, 0xa1, 0xa8,
	0x44, 0x65, 0x59, 0x22, 0x43, 0x4e, 0xcb, 0x6a, 0x49, 0x8a, 0xa8, 0x3a, 0xc4, 0xc3, 0xad, 0xa6,
	0x93, 0x02, 0xad, 0x29, 0x4f, 0xd6, 0x91, 0xc4, 0xa4, 0xf3, 0x83, 0xe1, 0x2b, 0xa4, 0x22, 0x6d,
	0x78, 0x68, 0x1f, 0xa9, 0x12, 0x87, 0xba, 0xc6, 0x2c, 0x99, 0xd9, 0xc1, 0x09, 0xc9, 0x12, 0x35,
	0x9f, 0xa2, 0x65, 0x25, 0x17, 0xf8, 0x91, 0xec, 0x24, 0x77, 0xad, 0x95, 0x64, 0x42, 0x00, 0x77,
	0xfd, 0x48, 0x98, 0x58, 0xd3, 0xb1, 0x1f, 0x98, 0xbb, 0xd0, 0x49, 0x09, 0x8f, 0xfc, 0xb1, 0xac,
	0xb6, 0xf8, 0x31, 0x56, 0x5b, 0xca, 0x3d, 0xd4, 0x40, 0xa8, 0xf7, 0x60, 0xee, 0x1c, 0xf1, 0x98,
	0x74, 0x4e, 0x23, 0x91, 0x88, 0xc6, 0xfc, 0x24, 0x26, 0xa5, 0xcb, 0x6f, 0xf3, 0x63, 0xb8, 0x90,
	0x72, 0x7c, 0x8c, 0xaa, 0x0e, 0xb1, 0x48, 0x55, 0x9e, 0xa3, 0xdf, 0xd5, 0x6e, 0x76, 0x57, 0x85,
	0x95, 0xb5, 0x1a, 0xdc, 0xa2, 0x11, 0xbe, 0x4a, 0x2b, 0x05, 0x46, 0xd2, 0xcc, 0xf2, 0x2b, 0x71,
	0x08, 0x35, 0x32, 0x7f, 0x09, 0x17, 0x0b, 0xd0, 0xcf, 0x43, 0x37, 0xe6, 0xe7, 0x6f, 0x4a, 0x9c,
	0xaa, 0x3a, 0x27, 0x71, 0xfe, 0xc3, 0xa9, 0xe8, 0x85, 0xab, 0x82, 0x43, 0x0d, 0xcc, 0x37, 0xb5,
	0x33, 0xed, 0x08, 0x8a, 0xbc, 0x1f, 0x82, 0x49, 0x84, 0x66, 0xf7, 0x93, 0xcb, 0x44, 0xa3, 0xdb,
	0xff, 0x30, 0xa0, 0x4d, 0x39, 0xb8, 0x7c, 0xca, 0x37, 0xe0, 0x05, 0x6d, 0x38, 0xcc, 0x7e, 0x5a,
	0x61, 0x3f, 0x58, 0xaf, 0x7f, 0xf3, 0xe7, 0x7e, 0x05, 0xfd, 0x94, 0xe9, 0x08, 0xd1, 0x46, 0x66,
	0x15, 0x9a, 0xbb, 0x0c, 0x17, 0xf4, 0x39, 0xea, 0xdb, 0xb2, 0xea, 0x7a, 0xfd, 0x77, 0x25, 0xd3,
	0xd4, 0x99, 0x65, 0x35, 0x9a, 0xbe, 0x0a, 0x6b, 0xfa, 0x74, 0xda, 0xc6, 0x66, 0x75, 0x62, 0x5f,
	0x10, 0x2e, 0x6b, 0x24, 0xb1, 0x25, 0x42, 0x5c, 0x83, 0x97, 0x72, 0x3b, 0xe8, 0x31, 0x82, 0x35,
	0x08, 0x74, 0x1d, 0xd6, 0xcb, 0x40, 0x2a, 0x6e, 0xb0, 0xe5, 0xf2, 0xcd, 0xb2, 0x66, 0x28, 0x6b,
	0x95, 0x9f, 0x36, 0x99, 0x06, 0x3a, 0x8e, 0x09, 0xfd, 0x02, 0x83, 0x34, 0x9c, 0xb2, 0x36, 0xb1,
	0x28, 0x1c, 0x39, 0x03, 0x74, 0x88, 0x49, 0x41, 0x8a, 0xac, 0x59, 0xc6, 0xba, 0xc4, 0xe2, 0x15,
	0x78, 0x51, 0x47, 0x68, 0xbd, 0x25, 0xd6, 0x23, 0xc8, 0xcb, 0x60, 0xe4, 0xcc, 0x22, 0x93, 0x21,
	0xb6, 0x42, 0xb3, 0x05, 0x39, 0xf5, 0x04, 0x98, 0x31, 0xc2, 0x5c, 0x81, 0x8b, 0x39, 0x95, 0xd1,
	0x6f, 0x6a, 0x6c, 0x95, 0xc4, 0xbc, 0x01, 0x2f, 0x17, 0x9c, 0x22, 0xd7, 0xc9, 0x66, 0x46, 0xb9,
	0x4e, 0xf4, 0x9e, 0x36, 0xbb, 0x50, 0x2e, 0xad, 0xea, 0x6a, 0xb3, 0x8b, 0xe5, 0x1a, 0x4b, 0x73,
	0x1c, 0xb6, 0x46, 0x5b, 0x5c, 0x82, 0xd5, 0x3c, 0x40, 0xf0, 0x7e, 0xa1, 0xdc, 0xf4, 0xf9, 0xea,
	0x91, 0xbd, 0x58, 0xae, 0x11, 0xfd, 0xa7, 0x1e, 0xd6, 0x2f, 0xf7, 0xb4, 0xdc, 0xaf, 0x3f, 0xec,
	0xa5, 0x72, 0x50, 0xee, 0xd7, 0x03, 0xb6, 0x5e, 0xee, 0xf6, 0xe9, 0x6f, 0x06, 0xec, 0xd2, 0x42,
	0x4f, 0xa4, 0x3e, 0x2b, 0xbb, 0x5c, 0xee, 0x89, 0xc9, 0xf4, 0x15, 0xda, 0xa1, 0x70, 0xea, 0x7c,
	0x43, 0x8e, 0x5d, 0x2b, 0x77, 0xb5, 0xac, 0x49, 0xc7, 0xae, 0x97, 0xbb, 0x9a, 0xd6, 0x7c, 0x62,
	0x37, 0xca, 0x4f, 0x9c, 0x6b, 0x19, 0xb1, 0xd7, 0x08, 0x54, 0xf0, 0x96, 0x62, 0x3b, 0x87, 0xdd,
	0x24, 0x89, 0x5e, 0x83, 0xcb, 0x39, 0x6f, 0x29, 0xfe, 0xaa, 0xc1, 0x6e, 0x11, 0xb0, 0xb0, 0x6b,
	0xee, 0x97, 0x0e, 0x76, 0xbb, 0xdc, 0xf6, 0xf9, 0x12, 0x9a, 0xbd, 0x5e, 0xee, 0x7d, 0x34, 0xfb,
	0x46, 0xb9, 0x26, 0xf3, 0xfd, 0x49, 0xf6, 0x66, 0xb9, 0x9e, 0xb4, 0x96, 0x1e, 0x1b, 0x94, 0x87,
	0x42, 0x6a, 0xf3, 0xb1, 0xb7, 0xca, 0x35, 0x54, 0x6c, 0x0c, 0xb0, 0x3b, 0x8b, 0x2c, 0xab, 0x77,
	0x72, 0xd8, 0xdb, 0xe5, 0xdc, 0x8a, 0x7d, 0x24, 0xb6, 0x59, 0xce, 0x2d, 0xdf, 0x17, 0x62, 0xef,
	0x94, 0x73, 0x2b, 0xb6, 0x72, 0xd8, 0xbb, 0xe5, 0x77, 0x5d, 0xcf, 0xe5, 0xd9, 0x7b, 0xe5, 0x36,
	0xc9, 0x27, 0xcd, 0xec, 0x7d, 0xe2, 0x54, 0xd0, 0xa7, 0xf6, 0x0b, 0x3f, 0xfb, 0x21, 0x31, 0xba,
	0x09, 0x57, 0x72, 0x47, 0x3c, 0xf3, 0x5b, 0x08, 0xfb, 0x80, 0x90, 0xaf, 0xc2, 0xa5, 0x32, 0x64,
	0x02, 0xfb, 0xd1, 0x02, 0xcd, 0xe6, 0x0a, 0x49, 0x76, 0x97, 0x98, 0x15, 0x3c, 0xf4, 0x4c, 0xe5,
	0xc5, 0x7e, 0x5c, 0xee, 0xa1, 0xb9, 0x4a, 0x88, 0xfd, 0xa4, 0x9c, 0xdb, 0x99, 0xc4, 0x9e, 0x7d,
	0xb8, 0xc0, 0x95, 0xf3, 0xa8, 0x9f, 0x96, 0xef, 0x99, 0x4b, 0xb1, 0xd9, 0xcf, 0xca, 0xf7, 0x3c,
	0x93, 0x18, 0xb3, 0xd1, 0x7a, 0xfd, 0xf7, 0xe7, 0x01, 0x93, 0xac, 0x98, 0x71, 0x02, 0x9e, 0xf1,
	0x22, 0x3d, 0x51, 0x66, 0x87, 0xeb, 0xf5, 0x6f, 0x4b, 0x84, 0xcb, 0xa5, 0x7a, 0x6c, 0x4c, 0xac,
	0x0a, 0x2e, 0xa4, 0xa7, 0x7f, 0x6c, 0x42, 0x8c, 0x6e, 0xc1, 0xd5, 0x52, 0x4c, 0x96, 0xd0, 0x31,
	0x8f, 0xd8, 0x15, 0x4c, 0x5f, 0x80, 0x32, 0x9f, 0x38, 0xde, 0x86, 0x8d, 0x73, 0x60, 0x32, 0x5d,
	0x63, 0x01, 0xb1, 0x5c, 0xb4, 0x7b, 0x96, 0x7a, 0xb1, 0x2f, 0x15, 0xf4, 0xde, 0x1d, 0xb8, 0xea,
	0xf8, 0xb3, 0x41, 0x64, 0xc7, 0x7e, 0x34, 0x71, 0xa7, 0xf6, 0x41, 0x34, 0x88, 0x43, 0xfe, 0xb5,
	0x1f, 0xaa, 0xff, 0x64, 0x39, 0x98, 0x1f, 0xde, 0xeb, 0xee, 0x4b, 0x02, 0x71, 0xfc, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x08, 0xac, 0xd9, 0x39, 0xf9, 0x22, 0x00, 0x00,
}
