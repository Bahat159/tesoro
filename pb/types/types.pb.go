// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	HDNodeType
	HDNodePathType
	CoinType
	MultisigRedeemScriptType
	TxInputType
	TxOutputType
	TxOutputBinType
	TransactionType
	TxRequestDetailsType
	TxRequestSerializedType
	IdentityType
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/conejoninja/tesoro/pb/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// *
// Type of failures returned by Failure message
// @used_in Failure
type FailureType int32

const (
	FailureType_Failure_UnexpectedMessage FailureType = 1
	FailureType_Failure_ButtonExpected    FailureType = 2
	FailureType_Failure_SyntaxError       FailureType = 3
	FailureType_Failure_ActionCancelled   FailureType = 4
	FailureType_Failure_PinExpected       FailureType = 5
	FailureType_Failure_PinCancelled      FailureType = 6
	FailureType_Failure_PinInvalid        FailureType = 7
	FailureType_Failure_InvalidSignature  FailureType = 8
	FailureType_Failure_Other             FailureType = 9
	FailureType_Failure_NotEnoughFunds    FailureType = 10
	FailureType_Failure_NotInitialized    FailureType = 11
	FailureType_Failure_FirmwareError     FailureType = 99
)

var FailureType_name = map[int32]string{
	1:  "Failure_UnexpectedMessage",
	2:  "Failure_ButtonExpected",
	3:  "Failure_SyntaxError",
	4:  "Failure_ActionCancelled",
	5:  "Failure_PinExpected",
	6:  "Failure_PinCancelled",
	7:  "Failure_PinInvalid",
	8:  "Failure_InvalidSignature",
	9:  "Failure_Other",
	10: "Failure_NotEnoughFunds",
	11: "Failure_NotInitialized",
	99: "Failure_FirmwareError",
}
var FailureType_value = map[string]int32{
	"Failure_UnexpectedMessage": 1,
	"Failure_ButtonExpected":    2,
	"Failure_SyntaxError":       3,
	"Failure_ActionCancelled":   4,
	"Failure_PinExpected":       5,
	"Failure_PinCancelled":      6,
	"Failure_PinInvalid":        7,
	"Failure_InvalidSignature":  8,
	"Failure_Other":             9,
	"Failure_NotEnoughFunds":    10,
	"Failure_NotInitialized":    11,
	"Failure_FirmwareError":     99,
}

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}
func (x FailureType) String() string {
	return proto.EnumName(FailureType_name, int32(x))
}
func (x *FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailureType_value, data, "FailureType")
	if err != nil {
		return err
	}
	*x = FailureType(value)
	return nil
}
func (FailureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Type of script which will be used for transaction output
// @used_in TxOutputType
type OutputScriptType int32

const (
	OutputScriptType_PAYTOADDRESS    OutputScriptType = 0
	OutputScriptType_PAYTOSCRIPTHASH OutputScriptType = 1
	OutputScriptType_PAYTOMULTISIG   OutputScriptType = 2
	OutputScriptType_PAYTOOPRETURN   OutputScriptType = 3
)

var OutputScriptType_name = map[int32]string{
	0: "PAYTOADDRESS",
	1: "PAYTOSCRIPTHASH",
	2: "PAYTOMULTISIG",
	3: "PAYTOOPRETURN",
}
var OutputScriptType_value = map[string]int32{
	"PAYTOADDRESS":    0,
	"PAYTOSCRIPTHASH": 1,
	"PAYTOMULTISIG":   2,
	"PAYTOOPRETURN":   3,
}

func (x OutputScriptType) Enum() *OutputScriptType {
	p := new(OutputScriptType)
	*p = x
	return p
}
func (x OutputScriptType) String() string {
	return proto.EnumName(OutputScriptType_name, int32(x))
}
func (x *OutputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OutputScriptType_value, data, "OutputScriptType")
	if err != nil {
		return err
	}
	*x = OutputScriptType(value)
	return nil
}
func (OutputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Type of script which will be used for transaction output
// @used_in TxInputType
type InputScriptType int32

const (
	InputScriptType_SPENDADDRESS  InputScriptType = 0
	InputScriptType_SPENDMULTISIG InputScriptType = 1
)

var InputScriptType_name = map[int32]string{
	0: "SPENDADDRESS",
	1: "SPENDMULTISIG",
}
var InputScriptType_value = map[string]int32{
	"SPENDADDRESS":  0,
	"SPENDMULTISIG": 1,
}

func (x InputScriptType) Enum() *InputScriptType {
	p := new(InputScriptType)
	*p = x
	return p
}
func (x InputScriptType) String() string {
	return proto.EnumName(InputScriptType_name, int32(x))
}
func (x *InputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InputScriptType_value, data, "InputScriptType")
	if err != nil {
		return err
	}
	*x = InputScriptType(value)
	return nil
}
func (InputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// Type of information required by transaction signing process
// @used_in TxRequest
type RequestType int32

const (
	RequestType_TXINPUT    RequestType = 0
	RequestType_TXOUTPUT   RequestType = 1
	RequestType_TXMETA     RequestType = 2
	RequestType_TXFINISHED RequestType = 3
)

var RequestType_name = map[int32]string{
	0: "TXINPUT",
	1: "TXOUTPUT",
	2: "TXMETA",
	3: "TXFINISHED",
}
var RequestType_value = map[string]int32{
	"TXINPUT":    0,
	"TXOUTPUT":   1,
	"TXMETA":     2,
	"TXFINISHED": 3,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Type of button request
// @used_in ButtonRequest
type ButtonRequestType int32

const (
	ButtonRequestType_ButtonRequest_Other            ButtonRequestType = 1
	ButtonRequestType_ButtonRequest_FeeOverThreshold ButtonRequestType = 2
	ButtonRequestType_ButtonRequest_ConfirmOutput    ButtonRequestType = 3
	ButtonRequestType_ButtonRequest_ResetDevice      ButtonRequestType = 4
	ButtonRequestType_ButtonRequest_ConfirmWord      ButtonRequestType = 5
	ButtonRequestType_ButtonRequest_WipeDevice       ButtonRequestType = 6
	ButtonRequestType_ButtonRequest_ProtectCall      ButtonRequestType = 7
	ButtonRequestType_ButtonRequest_SignTx           ButtonRequestType = 8
	ButtonRequestType_ButtonRequest_FirmwareCheck    ButtonRequestType = 9
	ButtonRequestType_ButtonRequest_Address          ButtonRequestType = 10
	ButtonRequestType_ButtonRequest_PublicKey        ButtonRequestType = 11
)

var ButtonRequestType_name = map[int32]string{
	1:  "ButtonRequest_Other",
	2:  "ButtonRequest_FeeOverThreshold",
	3:  "ButtonRequest_ConfirmOutput",
	4:  "ButtonRequest_ResetDevice",
	5:  "ButtonRequest_ConfirmWord",
	6:  "ButtonRequest_WipeDevice",
	7:  "ButtonRequest_ProtectCall",
	8:  "ButtonRequest_SignTx",
	9:  "ButtonRequest_FirmwareCheck",
	10: "ButtonRequest_Address",
	11: "ButtonRequest_PublicKey",
}
var ButtonRequestType_value = map[string]int32{
	"ButtonRequest_Other":            1,
	"ButtonRequest_FeeOverThreshold": 2,
	"ButtonRequest_ConfirmOutput":    3,
	"ButtonRequest_ResetDevice":      4,
	"ButtonRequest_ConfirmWord":      5,
	"ButtonRequest_WipeDevice":       6,
	"ButtonRequest_ProtectCall":      7,
	"ButtonRequest_SignTx":           8,
	"ButtonRequest_FirmwareCheck":    9,
	"ButtonRequest_Address":          10,
	"ButtonRequest_PublicKey":        11,
}

func (x ButtonRequestType) Enum() *ButtonRequestType {
	p := new(ButtonRequestType)
	*p = x
	return p
}
func (x ButtonRequestType) String() string {
	return proto.EnumName(ButtonRequestType_name, int32(x))
}
func (x *ButtonRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ButtonRequestType_value, data, "ButtonRequestType")
	if err != nil {
		return err
	}
	*x = ButtonRequestType(value)
	return nil
}
func (ButtonRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// *
// Type of PIN request
// @used_in PinMatrixRequest
type PinMatrixRequestType int32

const (
	PinMatrixRequestType_PinMatrixRequestType_Current   PinMatrixRequestType = 1
	PinMatrixRequestType_PinMatrixRequestType_NewFirst  PinMatrixRequestType = 2
	PinMatrixRequestType_PinMatrixRequestType_NewSecond PinMatrixRequestType = 3
)

var PinMatrixRequestType_name = map[int32]string{
	1: "PinMatrixRequestType_Current",
	2: "PinMatrixRequestType_NewFirst",
	3: "PinMatrixRequestType_NewSecond",
}
var PinMatrixRequestType_value = map[string]int32{
	"PinMatrixRequestType_Current":   1,
	"PinMatrixRequestType_NewFirst":  2,
	"PinMatrixRequestType_NewSecond": 3,
}

func (x PinMatrixRequestType) Enum() *PinMatrixRequestType {
	p := new(PinMatrixRequestType)
	*p = x
	return p
}
func (x PinMatrixRequestType) String() string {
	return proto.EnumName(PinMatrixRequestType_name, int32(x))
}
func (x *PinMatrixRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PinMatrixRequestType_value, data, "PinMatrixRequestType")
	if err != nil {
		return err
	}
	*x = PinMatrixRequestType(value)
	return nil
}
func (PinMatrixRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// *
// Structure representing BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
// @used_in PublicKey
// @used_in LoadDevice
// @used_in DebugLinkState
// @used_in Storage
type HDNodeType struct {
	Depth            *uint32 `protobuf:"varint,1,req,name=depth" json:"depth,omitempty"`
	Fingerprint      *uint32 `protobuf:"varint,2,req,name=fingerprint" json:"fingerprint,omitempty"`
	ChildNum         *uint32 `protobuf:"varint,3,req,name=child_num,json=childNum" json:"child_num,omitempty"`
	ChainCode        []byte  `protobuf:"bytes,4,req,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,5,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,6,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HDNodeType) Reset()                    { *m = HDNodeType{} }
func (m *HDNodeType) String() string            { return proto.CompactTextString(m) }
func (*HDNodeType) ProtoMessage()               {}
func (*HDNodeType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HDNodeType) GetDepth() uint32 {
	if m != nil && m.Depth != nil {
		return *m.Depth
	}
	return 0
}

func (m *HDNodeType) GetFingerprint() uint32 {
	if m != nil && m.Fingerprint != nil {
		return *m.Fingerprint
	}
	return 0
}

func (m *HDNodeType) GetChildNum() uint32 {
	if m != nil && m.ChildNum != nil {
		return *m.ChildNum
	}
	return 0
}

func (m *HDNodeType) GetChainCode() []byte {
	if m != nil {
		return m.ChainCode
	}
	return nil
}

func (m *HDNodeType) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *HDNodeType) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type HDNodePathType struct {
	Node             *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	AddressN         []uint32    `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *HDNodePathType) Reset()                    { *m = HDNodePathType{} }
func (m *HDNodePathType) String() string            { return proto.CompactTextString(m) }
func (*HDNodePathType) ProtoMessage()               {}
func (*HDNodePathType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HDNodePathType) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *HDNodePathType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

// *
// Structure representing Coin
// @used_in Features
type CoinType struct {
	CoinName            *string `protobuf:"bytes,1,opt,name=coin_name,json=coinName" json:"coin_name,omitempty"`
	CoinShortcut        *string `protobuf:"bytes,2,opt,name=coin_shortcut,json=coinShortcut" json:"coin_shortcut,omitempty"`
	AddressType         *uint32 `protobuf:"varint,3,opt,name=address_type,json=addressType,def=0" json:"address_type,omitempty"`
	MaxfeeKb            *uint64 `protobuf:"varint,4,opt,name=maxfee_kb,json=maxfeeKb" json:"maxfee_kb,omitempty"`
	AddressTypeP2Sh     *uint32 `protobuf:"varint,5,opt,name=address_type_p2sh,json=addressTypeP2sh,def=5" json:"address_type_p2sh,omitempty"`
	AddressTypeP2Wpkh   *uint32 `protobuf:"varint,6,opt,name=address_type_p2wpkh,json=addressTypeP2wpkh,def=6" json:"address_type_p2wpkh,omitempty"`
	AddressTypeP2Wsh    *uint32 `protobuf:"varint,7,opt,name=address_type_p2wsh,json=addressTypeP2wsh,def=10" json:"address_type_p2wsh,omitempty"`
	SignedMessageHeader *string `protobuf:"bytes,8,opt,name=signed_message_header,json=signedMessageHeader" json:"signed_message_header,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CoinType) Reset()                    { *m = CoinType{} }
func (m *CoinType) String() string            { return proto.CompactTextString(m) }
func (*CoinType) ProtoMessage()               {}
func (*CoinType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_CoinType_AddressType uint32 = 0
const Default_CoinType_AddressTypeP2Sh uint32 = 5
const Default_CoinType_AddressTypeP2Wpkh uint32 = 6
const Default_CoinType_AddressTypeP2Wsh uint32 = 10

func (m *CoinType) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return ""
}

func (m *CoinType) GetCoinShortcut() string {
	if m != nil && m.CoinShortcut != nil {
		return *m.CoinShortcut
	}
	return ""
}

func (m *CoinType) GetAddressType() uint32 {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return Default_CoinType_AddressType
}

func (m *CoinType) GetMaxfeeKb() uint64 {
	if m != nil && m.MaxfeeKb != nil {
		return *m.MaxfeeKb
	}
	return 0
}

func (m *CoinType) GetAddressTypeP2Sh() uint32 {
	if m != nil && m.AddressTypeP2Sh != nil {
		return *m.AddressTypeP2Sh
	}
	return Default_CoinType_AddressTypeP2Sh
}

func (m *CoinType) GetAddressTypeP2Wpkh() uint32 {
	if m != nil && m.AddressTypeP2Wpkh != nil {
		return *m.AddressTypeP2Wpkh
	}
	return Default_CoinType_AddressTypeP2Wpkh
}

func (m *CoinType) GetAddressTypeP2Wsh() uint32 {
	if m != nil && m.AddressTypeP2Wsh != nil {
		return *m.AddressTypeP2Wsh
	}
	return Default_CoinType_AddressTypeP2Wsh
}

func (m *CoinType) GetSignedMessageHeader() string {
	if m != nil && m.SignedMessageHeader != nil {
		return *m.SignedMessageHeader
	}
	return ""
}

// *
// Type of redeem script used in input
// @used_in TxInputType
type MultisigRedeemScriptType struct {
	Pubkeys          []*HDNodePathType `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`
	Signatures       [][]byte          `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
	M                *uint32           `protobuf:"varint,3,opt,name=m" json:"m,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MultisigRedeemScriptType) Reset()                    { *m = MultisigRedeemScriptType{} }
func (m *MultisigRedeemScriptType) String() string            { return proto.CompactTextString(m) }
func (*MultisigRedeemScriptType) ProtoMessage()               {}
func (*MultisigRedeemScriptType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultisigRedeemScriptType) GetPubkeys() []*HDNodePathType {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetM() uint32 {
	if m != nil && m.M != nil {
		return *m.M
	}
	return 0
}

// *
// Structure representing transaction input
// @used_in SimpleSignTx
// @used_in TransactionType
type TxInputType struct {
	AddressN         []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	PrevHash         []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`
	PrevIndex        *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
	ScriptSig        []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`
	Sequence         *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`
	ScriptType       *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=InputScriptType,def=0" json:"script_type,omitempty"`
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TxInputType) Reset()                    { *m = TxInputType{} }
func (m *TxInputType) String() string            { return proto.CompactTextString(m) }
func (*TxInputType) ProtoMessage()               {}
func (*TxInputType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

const Default_TxInputType_Sequence uint32 = 4294967295
const Default_TxInputType_ScriptType InputScriptType = InputScriptType_SPENDADDRESS

func (m *TxInputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxInputType) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *TxInputType) GetPrevIndex() uint32 {
	if m != nil && m.PrevIndex != nil {
		return *m.PrevIndex
	}
	return 0
}

func (m *TxInputType) GetScriptSig() []byte {
	if m != nil {
		return m.ScriptSig
	}
	return nil
}

func (m *TxInputType) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_TxInputType_Sequence
}

func (m *TxInputType) GetScriptType() InputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return Default_TxInputType_ScriptType
}

func (m *TxInputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

// *
// Structure representing transaction output
// @used_in SimpleSignTx
// @used_in TransactionType
type TxOutputType struct {
	Address          *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	AddressN         []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Amount           *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`
	ScriptType       *OutputScriptType         `protobuf:"varint,4,req,name=script_type,json=scriptType,enum=OutputScriptType" json:"script_type,omitempty"`
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`
	OpReturnData     []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TxOutputType) Reset()                    { *m = TxOutputType{} }
func (m *TxOutputType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputType) ProtoMessage()               {}
func (*TxOutputType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TxOutputType) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *TxOutputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxOutputType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputType) GetScriptType() OutputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return OutputScriptType_PAYTOADDRESS
}

func (m *TxOutputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *TxOutputType) GetOpReturnData() []byte {
	if m != nil {
		return m.OpReturnData
	}
	return nil
}

// *
// Structure representing compiled transaction output
// @used_in TransactionType
type TxOutputBinType struct {
	Amount           *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	ScriptPubkey     []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxOutputBinType) Reset()                    { *m = TxOutputBinType{} }
func (m *TxOutputBinType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputBinType) ProtoMessage()               {}
func (*TxOutputBinType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TxOutputBinType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputBinType) GetScriptPubkey() []byte {
	if m != nil {
		return m.ScriptPubkey
	}
	return nil
}

// *
// Structure representing transaction
// @used_in SimpleSignTx
type TransactionType struct {
	Version          *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs           []*TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs       []*TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	Outputs          []*TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	LockTime         *uint32            `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	InputsCnt        *uint32            `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt       *uint32            `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TransactionType) Reset()                    { *m = TransactionType{} }
func (m *TransactionType) String() string            { return proto.CompactTextString(m) }
func (*TransactionType) ProtoMessage()               {}
func (*TransactionType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TransactionType) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *TransactionType) GetInputs() []*TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TransactionType) GetBinOutputs() []*TxOutputBinType {
	if m != nil {
		return m.BinOutputs
	}
	return nil
}

func (m *TransactionType) GetOutputs() []*TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionType) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return 0
}

func (m *TransactionType) GetInputsCnt() uint32 {
	if m != nil && m.InputsCnt != nil {
		return *m.InputsCnt
	}
	return 0
}

func (m *TransactionType) GetOutputsCnt() uint32 {
	if m != nil && m.OutputsCnt != nil {
		return *m.OutputsCnt
	}
	return 0
}

// *
// Structure representing request details
// @used_in TxRequest
type TxRequestDetailsType struct {
	RequestIndex     *uint32 `protobuf:"varint,1,opt,name=request_index,json=requestIndex" json:"request_index,omitempty"`
	TxHash           []byte  `protobuf:"bytes,2,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestDetailsType) Reset()                    { *m = TxRequestDetailsType{} }
func (m *TxRequestDetailsType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestDetailsType) ProtoMessage()               {}
func (*TxRequestDetailsType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TxRequestDetailsType) GetRequestIndex() uint32 {
	if m != nil && m.RequestIndex != nil {
		return *m.RequestIndex
	}
	return 0
}

func (m *TxRequestDetailsType) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

// *
// Structure representing serialized data
// @used_in TxRequest
type TxRequestSerializedType struct {
	SignatureIndex   *uint32 `protobuf:"varint,1,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	SerializedTx     []byte  `protobuf:"bytes,3,opt,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestSerializedType) Reset()                    { *m = TxRequestSerializedType{} }
func (m *TxRequestSerializedType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestSerializedType) ProtoMessage()               {}
func (*TxRequestSerializedType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TxRequestSerializedType) GetSignatureIndex() uint32 {
	if m != nil && m.SignatureIndex != nil {
		return *m.SignatureIndex
	}
	return 0
}

func (m *TxRequestSerializedType) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TxRequestSerializedType) GetSerializedTx() []byte {
	if m != nil {
		return m.SerializedTx
	}
	return nil
}

// *
// Structure representing identity data
// @used_in IdentityType
type IdentityType struct {
	Proto            *string `protobuf:"bytes,1,opt,name=proto" json:"proto,omitempty"`
	User             *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Host             *string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port             *string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	Path             *string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Index            *uint32 `protobuf:"varint,6,opt,name=index,def=0" json:"index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdentityType) Reset()                    { *m = IdentityType{} }
func (m *IdentityType) String() string            { return proto.CompactTextString(m) }
func (*IdentityType) ProtoMessage()               {}
func (*IdentityType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

const Default_IdentityType_Index uint32 = 0

func (m *IdentityType) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

func (m *IdentityType) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *IdentityType) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *IdentityType) GetPort() string {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return ""
}

func (m *IdentityType) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *IdentityType) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return Default_IdentityType_Index
}

var E_WireIn = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50002,
	Name:          "wire_in",
	Tag:           "varint,50002,opt,name=wire_in,json=wireIn",
}

var E_WireOut = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50003,
	Name:          "wire_out",
	Tag:           "varint,50003,opt,name=wire_out,json=wireOut",
}

var E_WireDebugIn = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50004,
	Name:          "wire_debug_in",
	Tag:           "varint,50004,opt,name=wire_debug_in,json=wireDebugIn",
}

var E_WireDebugOut = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50005,
	Name:          "wire_debug_out",
	Tag:           "varint,50005,opt,name=wire_debug_out,json=wireDebugOut",
}

func init() {
	proto.RegisterType((*HDNodeType)(nil), "HDNodeType")
	proto.RegisterType((*HDNodePathType)(nil), "HDNodePathType")
	proto.RegisterType((*CoinType)(nil), "CoinType")
	proto.RegisterType((*MultisigRedeemScriptType)(nil), "MultisigRedeemScriptType")
	proto.RegisterType((*TxInputType)(nil), "TxInputType")
	proto.RegisterType((*TxOutputType)(nil), "TxOutputType")
	proto.RegisterType((*TxOutputBinType)(nil), "TxOutputBinType")
	proto.RegisterType((*TransactionType)(nil), "TransactionType")
	proto.RegisterType((*TxRequestDetailsType)(nil), "TxRequestDetailsType")
	proto.RegisterType((*TxRequestSerializedType)(nil), "TxRequestSerializedType")
	proto.RegisterType((*IdentityType)(nil), "IdentityType")
	proto.RegisterEnum("FailureType", FailureType_name, FailureType_value)
	proto.RegisterEnum("OutputScriptType", OutputScriptType_name, OutputScriptType_value)
	proto.RegisterEnum("InputScriptType", InputScriptType_name, InputScriptType_value)
	proto.RegisterEnum("RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("ButtonRequestType", ButtonRequestType_name, ButtonRequestType_value)
	proto.RegisterEnum("PinMatrixRequestType", PinMatrixRequestType_name, PinMatrixRequestType_value)
	proto.RegisterExtension(E_WireIn)
	proto.RegisterExtension(E_WireOut)
	proto.RegisterExtension(E_WireDebugIn)
	proto.RegisterExtension(E_WireDebugOut)
}

var fileDescriptor0 = []byte{
	// 1609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0xdb, 0x52, 0xdb, 0x56,
	0x17, 0xfe, 0x65, 0xc0, 0x36, 0x4b, 0x06, 0x84, 0x20, 0x89, 0x73, 0x84, 0xf8, 0xff, 0xe7, 0x0f,
	0x65, 0x26, 0x4e, 0xe2, 0x49, 0xd2, 0x09, 0xd3, 0x69, 0x07, 0x6c, 0x13, 0x3c, 0x29, 0xc6, 0x23,
	0x8b, 0x86, 0x5e, 0x69, 0x84, 0xb4, 0xb1, 0x34, 0xd8, 0x92, 0x2a, 0x6d, 0x81, 0xc9, 0x4d, 0xaf,
	0xda, 0x8b, 0xce, 0xf4, 0x31, 0xfa, 0x1e, 0x7d, 0x81, 0xde, 0xf4, 0x30, 0xbd, 0xec, 0x1b, 0xf4,
	0x19, 0xba, 0xf6, 0x41, 0x3e, 0x25, 0xe9, 0x70, 0xe7, 0xfd, 0x7d, 0x7b, 0xad, 0xbd, 0xf6, 0xb7,
	0xbe, 0xbd, 0x04, 0xa0, 0xd2, 0xab, 0x88, 0x24, 0xd5, 0x28, 0x0e, 0x69, 0x78, 0x67, 0xb3, 0x17,
	0x86, 0xbd, 0x3e, 0x79, 0xc2, 0x57, 0xa7, 0xe9, 0xd9, 0x13, 0x97, 0x24, 0x4e, 0xec, 0x47, 0x34,
	0x8c, 0xc5, 0x8e, 0xca, 0xcf, 0x0a, 0xc0, 0x41, 0xa3, 0x1d, 0xba, 0xc4, 0xc4, 0x38, 0x7d, 0x1d,
	0x16, 0x5c, 0x12, 0x51, 0xaf, 0xac, 0x6c, 0xe6, 0xb6, 0x96, 0x0c, 0xb1, 0xd0, 0x37, 0x41, 0x3d,
	0xf3, 0x83, 0x1e, 0x89, 0xa3, 0xd8, 0x0f, 0x68, 0x39, 0xc7, 0xb9, 0x49, 0x48, 0xbf, 0x0b, 0x8b,
	0x8e, 0xe7, 0xf7, 0x5d, 0x2b, 0x48, 0x07, 0xe5, 0x39, 0xce, 0x17, 0x39, 0xd0, 0x4e, 0x07, 0xfa,
	0x7d, 0x00, 0xc7, 0xb3, 0xfd, 0xc0, 0x72, 0xf0, 0x98, 0xf2, 0x3c, 0xb2, 0x25, 0x63, 0x91, 0x23,
	0x75, 0x04, 0xf4, 0x0d, 0x50, 0x31, 0xc9, 0x85, 0x4d, 0x89, 0x75, 0x4e, 0xae, 0xca, 0x0b, 0x9b,
	0x0a, 0xf2, 0x20, 0xa1, 0x37, 0xe4, 0x8a, 0xc5, 0x47, 0xe9, 0x69, 0xdf, 0x77, 0x38, 0x9f, 0xe7,
	0xfc, 0xa2, 0x40, 0x90, 0xae, 0xb4, 0x61, 0x59, 0xdc, 0xa0, 0x63, 0x53, 0x8f, 0xdf, 0x62, 0x03,
	0xe6, 0x03, 0x76, 0x14, 0xbb, 0x84, 0x5a, 0x53, 0xab, 0xe3, 0x0b, 0x1a, 0x9c, 0x60, 0xe5, 0xda,
	0xae, 0x1b, 0x93, 0x24, 0xb1, 0x02, 0xbc, 0xce, 0x1c, 0x2b, 0x57, 0x02, 0xed, 0xca, 0x9f, 0x39,
	0x28, 0xd6, 0x43, 0x3f, 0xe0, 0xa9, 0xd8, 0xc5, 0xf0, 0xb7, 0x15, 0xd8, 0x03, 0x96, 0x4f, 0xd9,
	0x5a, 0xc4, 0x8b, 0x21, 0xd0, 0xc6, 0xb5, 0xfe, 0x5f, 0x58, 0xe2, 0x64, 0xe2, 0x85, 0x31, 0x75,
	0x52, 0xa6, 0x0c, 0xdb, 0x50, 0x62, 0x60, 0x57, 0x62, 0xfa, 0xff, 0xa0, 0x94, 0x9d, 0xc5, 0x5a,
	0x83, 0xea, 0x28, 0x5b, 0x4b, 0x3b, 0xca, 0x53, 0x43, 0x95, 0x70, 0x76, 0xce, 0xc0, 0x1e, 0x9e,
	0x11, 0xd4, 0xe0, 0x14, 0x25, 0x52, 0xb6, 0xe6, 0x8d, 0xa2, 0x00, 0xde, 0x9c, 0xea, 0x8f, 0x61,
	0x75, 0x32, 0x85, 0x15, 0xd5, 0x12, 0x8f, 0xeb, 0x84, 0x79, 0x5e, 0x18, 0x2b, 0x13, 0x79, 0x3a,
	0xc8, 0xe8, 0xcf, 0x60, 0x6d, 0x66, 0xfb, 0x65, 0x74, 0xee, 0x71, 0xe1, 0x30, 0xe0, 0xa5, 0xb1,
	0x3a, 0x15, 0xc0, 0x38, 0xfd, 0x29, 0xe8, 0xb3, 0x21, 0x78, 0x44, 0x81, 0x47, 0xe4, 0x9e, 0x3d,
	0x35, 0xb4, 0xe9, 0x10, 0x3c, 0xa4, 0x06, 0x37, 0x12, 0xbf, 0x17, 0x10, 0xd7, 0x1a, 0x20, 0x6e,
	0xf7, 0x88, 0xe5, 0x11, 0xdb, 0x25, 0x71, 0xb9, 0xc8, 0x35, 0x58, 0x13, 0xe4, 0xa1, 0xe0, 0x0e,
	0x38, 0x55, 0x49, 0xa0, 0x7c, 0x98, 0xf6, 0xa9, 0x8f, 0x9c, 0x41, 0x5c, 0x42, 0x06, 0x5d, 0x6e,
	0x46, 0x2e, 0xc0, 0x27, 0x50, 0xc0, 0x96, 0x62, 0x83, 0x13, 0x94, 0x79, 0x0e, 0xdb, 0xb6, 0x52,
	0x9d, 0xee, 0xaa, 0x91, 0xf1, 0xfa, 0x03, 0x00, 0x96, 0xdd, 0xa6, 0x29, 0x96, 0xc4, 0xdb, 0x87,
	0x7e, 0x19, 0x23, 0x7a, 0x09, 0x94, 0x81, 0x90, 0xd9, 0x50, 0x06, 0x95, 0x9f, 0x72, 0xa0, 0x9a,
	0xc3, 0x56, 0x10, 0xa5, 0x34, 0x53, 0x7a, 0xdc, 0x7b, 0x65, 0xba, 0xf7, 0x8c, 0x8c, 0x62, 0x72,
	0x61, 0x79, 0x36, 0x5e, 0x3f, 0xc7, 0x9d, 0x5a, 0x64, 0xc0, 0x01, 0xae, 0xb9, 0x0f, 0x19, 0xe9,
	0x07, 0x2e, 0x19, 0x4a, 0x97, 0xf3, 0xed, 0x2d, 0x06, 0x30, 0x5a, 0x3c, 0x2e, 0x0b, 0x6b, 0xe1,
	0x3d, 0x44, 0x9b, 0x0a, 0xa4, 0xeb, 0xf7, 0xf4, 0xff, 0x43, 0x31, 0x21, 0xdf, 0xa4, 0x24, 0x70,
	0x88, 0xec, 0x1d, 0x3c, 0xaf, 0xbd, 0x7a, 0xfe, 0xea, 0xe5, 0xa7, 0xb5, 0x57, 0x2f, 0x8c, 0x11,
	0xa7, 0x7f, 0x01, 0xaa, 0x4c, 0xc3, 0xed, 0xc2, 0xba, 0xb6, 0x5c, 0xd3, 0xaa, 0xfc, 0x02, 0x63,
	0xbd, 0x76, 0x4a, 0xdd, 0x4e, 0xb3, 0xdd, 0xd8, 0x6d, 0x34, 0x8c, 0x66, 0xb7, 0x6b, 0xc8, 0x93,
	0xf9, 0x05, 0x5f, 0x40, 0x71, 0x20, 0x55, 0xe6, 0x1d, 0x54, 0x6b, 0xb7, 0xab, 0x1f, 0x93, 0xdd,
	0x18, 0x6d, 0xad, 0xfc, 0xad, 0x40, 0xc9, 0x1c, 0x1e, 0xa5, 0x34, 0x13, 0xaa, 0x0c, 0x05, 0xa9,
	0x8b, 0x34, 0x7e, 0xb6, 0xfc, 0xd7, 0xe7, 0xa3, 0xdf, 0x84, 0xbc, 0x3d, 0x08, 0x53, 0x9c, 0x13,
	0x4c, 0xa1, 0x79, 0x43, 0xae, 0xd0, 0x30, 0x53, 0xf7, 0x62, 0x63, 0x60, 0xb9, 0xb6, 0x5a, 0x15,
	0x07, 0x4e, 0x54, 0xf4, 0xb1, 0xab, 0x2c, 0x5c, 0xfb, 0x2a, 0xf8, 0xe4, 0x96, 0xc3, 0xc8, 0x8a,
	0x09, 0xda, 0x21, 0xb0, 0x5c, 0x9b, 0xda, 0x72, 0x68, 0x94, 0xc2, 0xc8, 0xe0, 0x60, 0x03, 0x31,
	0x9c, 0x1b, 0x2b, 0xd9, 0x7d, 0xf7, 0xe4, 0x6b, 0x1f, 0xd7, 0xae, 0x4c, 0xd5, 0x8e, 0x0f, 0x5d,
	0xd6, 0x2e, 0x3c, 0x28, 0xad, 0x51, 0x12, 0x60, 0x87, 0x63, 0x95, 0x1f, 0x72, 0x98, 0x30, 0xb6,
	0x83, 0xc4, 0x76, 0xa8, 0x1f, 0x06, 0x99, 0x86, 0x17, 0x24, 0x4e, 0x70, 0xc9, 0x35, 0x5c, 0x32,
	0xb2, 0x25, 0xd6, 0x98, 0xf7, 0x59, 0x4b, 0x85, 0x81, 0xd5, 0x5a, 0xa9, 0x3a, 0x61, 0x52, 0x43,
	0x72, 0xf8, 0x94, 0xd5, 0x53, 0x1c, 0x30, 0x21, 0xaf, 0x32, 0x41, 0x45, 0xd9, 0x56, 0xad, 0x3a,
	0x53, 0xb7, 0x01, 0xb8, 0x49, 0x20, 0x89, 0xfe, 0x08, 0x0a, 0xd9, 0xf6, 0x05, 0xbe, 0x7d, 0xa9,
	0x3a, 0xd9, 0x56, 0x23, 0x63, 0x59, 0x17, 0xfb, 0xa1, 0x73, 0x6e, 0x51, 0x7f, 0x40, 0xb8, 0x5d,
	0xb1, 0x8b, 0x0c, 0x30, 0x71, 0xcd, 0xcc, 0x2c, 0x4a, 0xb0, 0x1c, 0x54, 0x83, 0x8f, 0x0e, 0x63,
	0x51, 0x20, 0x75, 0x14, 0x04, 0x67, 0xb6, 0x4c, 0xc3, 0x79, 0x3e, 0x28, 0x0c, 0x90, 0x10, 0x6e,
	0xa8, 0x98, 0xb0, 0x6e, 0x0e, 0x0d, 0xe6, 0xe9, 0x84, 0x36, 0x08, 0xb5, 0xfd, 0xbe, 0x98, 0x73,
	0xa8, 0x64, 0x2c, 0x50, 0xf9, 0x8c, 0x84, 0x2c, 0x25, 0x09, 0x8a, 0x97, 0x74, 0x0b, 0x0a, 0x74,
	0x98, 0xbd, 0x41, 0xd6, 0xb8, 0x3c, 0x1d, 0xb2, 0x17, 0x58, 0xf9, 0x4e, 0x81, 0x5b, 0xa3, 0xb4,
	0x5d, 0x12, 0xfb, 0x76, 0xdf, 0x7f, 0x47, 0x5c, 0x9e, 0xf9, 0x11, 0xac, 0x8c, 0x66, 0xc0, 0x54,
	0xee, 0xe5, 0x11, 0x2c, 0xb2, 0xdf, 0x83, 0xc5, 0x11, 0x22, 0xf3, 0x8f, 0x01, 0xde, 0xea, 0x51,
	0x62, 0x8b, 0x0e, 0xf9, 0x20, 0x61, 0xad, 0x1e, 0x9f, 0x36, 0xac, 0xfc, 0x88, 0x6f, 0xa5, 0xe5,
	0x92, 0x80, 0xfa, 0xf4, 0x2a, 0xfb, 0x6e, 0xf2, 0xef, 0xa9, 0x7c, 0x29, 0x62, 0xa1, 0xeb, 0x30,
	0x9f, 0x62, 0x9c, 0xfc, 0x2c, 0xf0, 0xdf, 0x0c, 0xf3, 0xc2, 0x84, 0xf2, 0xb4, 0x88, 0xb1, 0xdf,
	0x0c, 0x8b, 0xf0, 0x6b, 0xc1, 0x9b, 0x80, 0x18, 0xfb, 0xcd, 0x31, 0x9c, 0x7c, 0xdc, 0xf6, 0x0c,
	0xc3, 0xdf, 0xa8, 0xcb, 0x82, 0xb8, 0x58, 0x3e, 0xfb, 0x86, 0x88, 0xf5, 0xf6, 0x2f, 0x38, 0xe3,
	0xf6, 0x51, 0x63, 0xbc, 0x00, 0x2f, 0xe7, 0x3e, 0xdc, 0x96, 0x4b, 0xeb, 0x38, 0x20, 0xc3, 0x88,
	0x38, 0x74, 0x34, 0x8b, 0x35, 0x45, 0xbf, 0x03, 0x37, 0x33, 0x7a, 0x2f, 0xa5, 0x34, 0x0c, 0x9a,
	0x72, 0x8b, 0x96, 0xc3, 0x33, 0xd6, 0x32, 0xae, 0x7b, 0x15, 0x50, 0x7b, 0xd8, 0x8c, 0xe3, 0x30,
	0xd6, 0xe6, 0xd0, 0x2e, 0xb7, 0x32, 0x62, 0x97, 0x1b, 0xbc, 0x6e, 0xe3, 0xb8, 0xea, 0xf7, 0x31,
	0x6a, 0x7e, 0x32, 0xaa, 0xe3, 0x8f, 0xd3, 0x2d, 0xe0, 0x03, 0x58, 0x9f, 0x20, 0xc6, 0x21, 0x79,
	0x7c, 0x6b, 0xfa, 0x04, 0xd3, 0x0a, 0x2e, 0x50, 0x5d, 0x57, 0x2b, 0x60, 0x7b, 0xca, 0x19, 0x2e,
	0xc1, 0x6e, 0xd6, 0x1c, 0xad, 0xa8, 0xaf, 0xc2, 0x52, 0xc6, 0x1e, 0x51, 0x8f, 0xc4, 0xda, 0xe2,
	0xe4, 0x6d, 0xda, 0x21, 0x6d, 0x06, 0x61, 0xda, 0xf3, 0xf6, 0xd3, 0xc0, 0x4d, 0x34, 0x98, 0xe1,
	0x5a, 0x81, 0x4f, 0x65, 0x13, 0x35, 0x55, 0xbf, 0x0d, 0x37, 0x32, 0x6e, 0xdf, 0x8f, 0x07, 0x97,
	0x76, 0x4c, 0xc4, 0x5d, 0x9d, 0x6d, 0x0b, 0xb4, 0xd9, 0xb9, 0xa4, 0x6b, 0x50, 0xea, 0xec, 0x7e,
	0x6d, 0x1e, 0xc9, 0x91, 0xab, 0xfd, 0x47, 0x5f, 0x83, 0x15, 0x8e, 0x74, 0xeb, 0x46, 0xab, 0x63,
	0x1e, 0xec, 0x76, 0x0f, 0x50, 0x5b, 0x2c, 0x90, 0x83, 0x87, 0xc7, 0x5f, 0x9a, 0xad, 0x6e, 0xeb,
	0x35, 0x4a, 0x9a, 0x41, 0x47, 0x1d, 0xa3, 0x69, 0x1e, 0x1b, 0x6d, 0x6d, 0x6e, 0xfb, 0x25, 0xac,
	0xcc, 0x0c, 0x74, 0x96, 0x7f, 0x72, 0xa4, 0x63, 0x7e, 0x8c, 0xe3, 0xc8, 0x28, 0x95, 0xb2, 0xdd,
	0x00, 0x55, 0xba, 0x9f, 0xc7, 0xa8, 0x50, 0x30, 0x4f, 0x5a, 0xed, 0xce, 0xb1, 0x89, 0xdb, 0x4b,
	0x50, 0x34, 0x4f, 0x8e, 0x8e, 0x4d, 0xb6, 0x52, 0x74, 0x80, 0xbc, 0x79, 0x72, 0xd8, 0x34, 0x77,
	0xb1, 0x80, 0x65, 0x00, 0xf3, 0x64, 0xbf, 0xd5, 0x6e, 0x75, 0x0f, 0x9a, 0x0d, 0x3c, 0xfd, 0xaf,
	0x1c, 0xac, 0x8a, 0xc6, 0x4f, 0x26, 0xc3, 0x1e, 0x4e, 0x81, 0x52, 0x60, 0x45, 0xaf, 0xc0, 0x83,
	0x69, 0x62, 0x9f, 0x90, 0x23, 0x9c, 0x63, 0xa6, 0x87, 0x13, 0xdf, 0x0b, 0xfb, 0xcc, 0x36, 0x1b,
	0x70, 0x77, 0x7a, 0x4f, 0x3d, 0x0c, 0xce, 0x50, 0x55, 0x21, 0x23, 0xda, 0x07, 0x2d, 0x39, 0xbd,
	0xc1, 0x20, 0x09, 0xc1, 0xd1, 0x70, 0xe1, 0x3b, 0x04, 0x0d, 0xf4, 0x1e, 0x2d, 0xe3, 0xdf, 0x86,
	0x31, 0xb3, 0x11, 0x9a, 0x62, 0x9a, 0x7e, 0xeb, 0x47, 0x44, 0x06, 0xe7, 0xdf, 0x0f, 0xee, 0xe0,
	0xf3, 0x43, 0x07, 0xd6, 0xed, 0x7e, 0x1f, 0x1d, 0x85, 0x1e, 0x9c, 0xa6, 0x99, 0xa1, 0xcc, 0x21,
	0xba, 0xe9, 0xbd, 0xaa, 0x33, 0x23, 0xd4, 0x3d, 0xe2, 0x9c, 0xa3, 0xb7, 0xd0, 0x23, 0xd3, 0x1b,
	0x76, 0xc5, 0x67, 0x0e, 0xad, 0x85, 0xef, 0x61, 0xe6, 0xd0, 0xec, 0x2f, 0x52, 0x4d, 0xdd, 0xfe,
	0x16, 0xd6, 0xd1, 0xd4, 0x87, 0x36, 0x8d, 0xfd, 0xe1, 0xa4, 0xc6, 0x9b, 0x70, 0xef, 0x43, 0xb8,
	0x55, 0x4f, 0xe3, 0x18, 0xc7, 0x09, 0x8a, 0xfd, 0x10, 0xee, 0x7f, 0x70, 0x47, 0x9b, 0x5c, 0x62,
	0x71, 0x09, 0x45, 0xad, 0xb1, 0x1f, 0x1f, 0xdb, 0xd2, 0x25, 0x4e, 0x18, 0xb8, 0xda, 0xdc, 0xce,
	0x67, 0x50, 0xb8, 0xf4, 0xf9, 0x20, 0xd4, 0x1f, 0x56, 0xc5, 0x7f, 0x01, 0xd5, 0xec, 0xbf, 0x80,
	0x6a, 0x13, 0xff, 0x4a, 0xff, 0xca, 0xee, 0xa7, 0xe4, 0x28, 0x62, 0x0f, 0x39, 0x29, 0xff, 0xfa,
	0x3d, 0x1b, 0x47, 0x45, 0x23, 0xcf, 0x62, 0x5a, 0xc1, 0xce, 0xe7, 0x50, 0xe4, 0xd1, 0x38, 0xd0,
	0xaf, 0x13, 0xfe, 0x9b, 0x0c, 0xe7, 0x47, 0x62, 0xc7, 0x77, 0x5e, 0xc3, 0x12, 0x8f, 0x77, 0xc9,
	0x69, 0xda, 0xbb, 0x66, 0x0d, 0xbf, 0xcb, 0x24, 0x2a, 0x8b, 0x6c, 0xb0, 0x40, 0x2c, 0xa4, 0x05,
	0xcb, 0x13, 0x89, 0xae, 0x59, 0xce, 0x1f, 0x32, 0x53, 0x69, 0x94, 0x09, 0x6b, 0xda, 0x7b, 0x0c,
	0x1b, 0x4e, 0x38, 0xa8, 0x26, 0x36, 0x0d, 0x13, 0xfc, 0xcf, 0xc4, 0x3e, 0x4d, 0xaa, 0x34, 0x26,
	0xef, 0xb2, 0xff, 0x84, 0x30, 0xd3, 0x1e, 0x98, 0x1c, 0x60, 0x62, 0xfe, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x73, 0x13, 0x93, 0x9b, 0x48, 0x0d, 0x00, 0x00,
}
